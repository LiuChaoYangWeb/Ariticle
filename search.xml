<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[js数组去重]]></title>
      <url>/2017/08/22/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</url>
      <content type="html"><![CDATA[<p><code>总结了一下数组去重的方法:</code></p>
<blockquote>
<h2 id="利用-indexOf-进行数组去重"><a href="#利用-indexOf-进行数组去重" class="headerlink" title="利用 indexOf 进行数组去重"></a>利用 <code>indexOf</code> 进行数组去重</h2></blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr1 = [];</div><div class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</div><div class="line">    <span class="comment">//ES5中引入了 indexOf 方法</span></div><div class="line">    <span class="keyword">if</span>( arr1.indexOf( arr[i] ) == <span class="number">-1</span> )&#123;</div><div class="line">        arr1.push( arr[i] );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log( arr1 );</div></pre></td></tr></table></figure>
<blockquote>
<h2 id="假设法去重"><a href="#假设法去重" class="headerlink" title="假设法去重"></a>假设法去重</h2></blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr1 = [];</div><div class="line"></div><div class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</div><div class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>( <span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr1.length; j ++)&#123;</div><div class="line">        <span class="keyword">if</span>( arr1[ j ] == arr[ i ])&#123;</div><div class="line">            flag = <span class="literal">false</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>( flag )&#123;</div><div class="line">        arr1.push( arr[ i ]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log( arr1 );</div></pre></td></tr></table></figure>
<blockquote>
<h2 id="利用缓存对象实现数组去重"><a href="#利用缓存对象实现数组去重" class="headerlink" title="利用缓存对象实现数组去重"></a>利用缓存对象实现数组去重</h2></blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> cache = &#123;&#125;,</div><div class="line">    arr1 = [];</div><div class="line"></div><div class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i ++ )&#123;</div><div class="line">    <span class="keyword">if</span>( !cache[ arr[ i ]]) &#123;</div><div class="line">        cache[ arr[ i ]] = <span class="literal">true</span>;</div><div class="line">        arr1.push( arr[ i ] );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log( arr1 );</div></pre></td></tr></table></figure>
<blockquote>
<font color="deeppink">ES6数组去重</font>

</blockquote>
<p>ES6里新添加了两个很好用的东西，set和Array.from。<br>set是一种新的数据结构，它可以接收一个数组或者是类数组对象，自动去重其中的重复项目。</p>
<p><img src="http://images2015.cnblogs.com/blog/1078621/201612/1078621-20161211203942241-417838408.png" alt="&#39;set&#39;"></p>
<p>在这我们可以看见，重复的项目已经被去掉了，包括NaN。正常情况下，NaN === NaN 返回的是false，但是在set里，一样能够帮你去重，厉害了。</p>
<p><img src="http://images2015.cnblogs.com/blog/1078621/201612/1078621-20161211204002304-2102473403.png" alt="&#39;结果&#39;"></p>
<p>set返回的是一个对象，但是我们想要的是数组啊。<br>这回，就该轮到Array.from出场了，它的作用，就是可以把类数组对象、可迭代对象转化为数组。</p>
<p><img src="http://images2015.cnblogs.com/blog/1078621/201612/1078621-20161211204642476-1611100838.png" alt="&#39;Array.from&#39;"></p>
<p><strong>兼容性</strong> </p>
<p>目前主流的浏览器，Chrome,Firfox,Opera，Safari，包括微软的Edge,都是支持的，唯独IE系列不支持</p>
]]></content>
      
        
        <tags>
            
            <tag> js数组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解盒子模型]]></title>
      <url>/2017/05/12/css%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<h2 id="理解CSS盒子模型"><a href="#理解CSS盒子模型" class="headerlink" title="理解CSS盒子模型"></a>理解CSS盒子模型</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3></blockquote>
<ul>
<li>网页设计中常听的属性名：内容(content)、填充(padding)、边框(border)、边界(margin)，CSS盒子模型都具备这些属性，也主要是这些属性。</li>
<li>这些属性我们可以把它转移到我们日常生活中的盒子(箱子)上来理解，日常生活中所见的盒子也就是能装东西的一种箱子，也具有这些属性，所以叫它盒子模型。</li>
<li>CSS盒子模型就是在网页设计中经常用到的CSS技术所使用的一种思维模型。</li>
<li>盒子模型是css中一个重要的概念，理解了盒子模型才能更好的排版。其实盒子模型有两种，分别是 ie 盒子模型和标准 w3c 盒子模型。他们对盒子模型的解释各不相同。</li>
</ul>
<a id="more"></a>
<blockquote>
<h3 id="标准盒子模型"><a href="#标准盒子模型" class="headerlink" title="标准盒子模型"></a>标准盒子模型</h3></blockquote>
<p><img src="http://ww1.sinaimg.cn/large/79462090jw1f1it8lp6ssj20kq0cnjs4.jpg?_=5237340" alt="标准盒子模型" title="标准盒子模型"></p>
<p>从上图可以看到标准 w3c 盒子模型的范围包括 margin、border、padding、content，并且 content 部分不包含其他部分。</p>
<blockquote>
<h3 id="ie-盒子模型"><a href="#ie-盒子模型" class="headerlink" title="ie 盒子模型"></a>ie 盒子模型</h3></blockquote>
<p><img src="http://ww3.sinaimg.cn/large/79462090jw1f1it9z7ugkj20lz0cu0tf.jpg?_=5237340" alt="ie 盒子模型" title="ie 盒子模型"></p>
<p>从上图可以看到 ie 盒子模型的范围也包括 margin、border、padding、content，和标准 w3c 盒子模型不同的是：ie 盒子模型的 content 部分包含了 border 和 pading。</p>
<p>例：一个盒子的 margin 为 20px，border 为 1px，padding 为 10px，content 的宽为 200px、高为 50px，假如用标准 w3c 盒子模型解释，那么这个盒子需要占据的位置为：宽 202+12+102+200=262px、高 202+12102+50=112px，盒子的实际大小为：宽 12+102+200=222px、高 12+102+50=72px；假如用ie 盒子模型，那么这个盒子需要占据的位置为：宽 202+200=240px、高 20*2+50=70px，盒子的实际大小为：宽 200px、高 50px。</p>
<p>在 CSS 中，width 和 height 指的是内容区域的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> 提示：背景应用于由内容和内边距、边框组成的区域。</div><div class="line"><span class="number">2.</span> 示：内边距、边框和外边距可以应用于一个元素的所有边，也可以应用于单独的边。</div><div class="line"><span class="number">3.</span> 提示：外边距可以是负值，而且在很多情况下都要使用负值的外边距。</div></pre></td></tr></table></figure>
<blockquote>
<h3 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h3></blockquote>
<p>一旦为页面设置了恰当的 DTD，大多数浏览器都会按照上面的图示来呈现内容。然而 IE 5 和 6 的呈现却是不正确的。根据 W3C 的规范，元素内容占据的空间是由 width 属性设置的，而内容周围的 padding 和 border 值是另外计算的。不幸的是，IE5.X 和 6 在怪异模式中使用自己的非标准模型。这些浏览器的 width 属性不是内容的宽度，而是内容、内边距和边框的宽度的总和。<br>虽然有方法解决这个问题。但是目前最好的解决方案是回避这个问题。也就是，不要给元素添加具有指定宽度的内边距，而是尝试将内边距或外边距添加到元素的父元素和子元素。</p>
<h4 id="那我们开发的时候选择哪中盒子模型呢？"><a href="#那我们开发的时候选择哪中盒子模型呢？" class="headerlink" title="那我们开发的时候选择哪中盒子模型呢？"></a>那我们开发的时候选择哪中盒子模型呢？</h4><p>肯定是“标准 w3c 盒子模型”。怎么样才算是选择了“标准 w3c 盒子模型”呢？很简单，就是在网页的顶部加上 doctype 声明。假如不加 doctype 声明，那么各个浏览器会根据自己的行为去理解网页，即 ie 浏览器会采用 ie 盒子模型去解释你的盒子，而 ff 会采用标准 w3c 盒子模型解释你的盒子，所以网页在不同的浏览器中就显示的不一样了。反之，假如加上了 doctype 声明，那么所有浏览器都会采用标准 w3c 盒子模型去解释你的盒子，网页就能在各个浏览器中显示一致了。</p>
<p><code>所以为了让网页能兼容各个浏览器，让我们用标准 w3c 盒子模型。</code></p>
<blockquote>
<h3 id="CSS3-box-sizing-属性"><a href="#CSS3-box-sizing-属性" class="headerlink" title="CSS3 box-sizing 属性"></a>CSS3 box-sizing 属性</h3></blockquote>
<h4 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h4><p><code>box-sizing</code> 属性允许您以特定的方式定义匹配某个区域的特定元素。<br><code>box-sizing</code>有两个值一个是<code>content-box</code>，另一个是<code>border-box</code>。<br>当设置为<code>box-sizing:content-box</code>时，将采用<code>*标准模式*</code>解析计算，也是默认模式；<br>当设置为<code>box-sizing:border-box</code>时，将采用<code>*怪异模式*</code>解析计算；<br>目前使用此属性需要前缀如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-webkit-box-sizing: content-box;</div><div class="line">-moz-box-sizing: content-box;</div><div class="line">box-sizing: content-box|border-box|inherit;</div></pre></td></tr></table></figure>
<p>例如，假如您需要并排放置两个带边框的框，可通过将 box-sizing 设置为 “border-box”。这可令浏览器以怪异模式呈现出带有指定宽度和高度的框，并把边框和内边距放入框中。</p>
]]></content>
      
        <categories>
            
            <category> CSS学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue-router从入门到入门]]></title>
      <url>/2017/05/11/v-router%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<blockquote>
<h2 id="get-started"><a href="#get-started" class="headerlink" title="get started"></a>get started</h2></blockquote>
<p>用 Vue.js + vue-router 创建单页应用，是非常简单的。<br>使用 Vue.js ，我们已经可以通过组合组件来组成应用程序，当你要把 vue-router 添加进来，我们需要做的是，将组件(components)映射到路由(routes)，然后告诉 vue-router 在哪里渲染它们。</p>
<p>你可以看看这个<a href="http://jsrun.net/pqiKp/edit" target="_blank" rel="external">例子</a></p>
<blockquote>
<h2 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h2></blockquote>
<p>你可以看看这个<a href="http://jsrun.net/YqiKp/edit" target="_blank" rel="external">例子</a></p>
<blockquote>
<h2 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h2></blockquote>
<p>你可以看看这个<a href="http://jsrun.net/ZqiKp/edit" target="_blank" rel="external">例子</a></p>
<p>更多的内容(编程式导航、命名路由、重定向、导航钩子等)可以参照<a href="https://router.vuejs.org/zh-cn/essentials/getting-started.html" target="_blank" rel="external">Vue-router官网</a></p>
]]></content>
      
        <categories>
            
            <category> Vue.js学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue.js </tag>
            
            <tag> v-router </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[npm 列出所有可以用的版本的命令]]></title>
      <url>/2017/04/13/npm/</url>
      <content type="html"><![CDATA[<p><code>npm info xxx</code></p>
<p><code>npm view xxx versions</code></p>
<p><code>安装指定版本</code></p>
<p>首先确保文件目录下含有<br><code>package.json</code>文件，<br>没有的话，可以通过<br><code>npm init</code><br>创建，<br>然后只需要在组件的后面加上<br>@2.8.1<br>版本号即可，<br>例如：react-router已经更新到4.x版本，想要下载2.x版本，可以通过下面命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev react-router@2.8.1</div></pre></td></tr></table></figure>
<p>下载完成，可以在<br><code>package.json</code></p>
<p>文件下，查看react-router版本 </p>
]]></content>
      
        <categories>
            
            <category> 包相关 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nrm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nrm切换npm源利器]]></title>
      <url>/2017/04/12/nrm/</url>
      <content type="html"><![CDATA[<p>在使用npm时，官方的源下载npm包会比较慢，国内我们基本使用淘宝的源，最近公司内部搭建了一套npm私有仓库。要添加自己公司内部的npm源，公司内部的源不可能把npm官方的npm包都全量同步，故需要npm源之间的切换，如果使用npm registry xxx的话，太不好管理了。nrm是管理npm源切换的利器。使用方法如下：</p>
<blockquote>
<p><code>安装nrm</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g nrm</div></pre></td></tr></table></figure>
<blockquote>
<p><code>nrm --help</code> 帮助命令</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Usage: nrm [options] [command]</div><div class="line"></div><div class="line"></div><div class="line">  Commands:</div><div class="line"></div><div class="line">    ls                           list all the registries</div><div class="line">    current                      show current registry name</div><div class="line">    use &lt;registry&gt;               change registry to registry</div><div class="line">    add &lt;registry&gt; &lt;url&gt; [home]  add one custom registry</div><div class="line">    del|rm &lt;registry&gt;            delete one custom registry</div><div class="line">    home &lt;registry&gt; [browser]    open the homepage of registry with optional browser</div><div class="line">    test [registry]              show response time for specific or all registries</div><div class="line">    help                         print this help</div><div class="line"></div><div class="line">  Options:</div><div class="line"></div><div class="line">    -h, --help     output usage information</div><div class="line">    -V, --version  output the version number</div></pre></td></tr></table></figure>
<a id="more"></a>
<blockquote>
<p><code>nrm ls</code>是列出来现在已经配置好的所有的原地址</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">npm ---- https:<span class="comment">//registry.npmjs.org/</span></div><div class="line">* cnpm --- http:<span class="comment">//r.cnpmjs.org/</span></div><div class="line">  taobao - http:<span class="comment">//registry.npm.taobao.org/</span></div><div class="line">  nj ----- https:<span class="comment">//registry.nodejitsu.com/</span></div><div class="line">  rednpm - http:<span class="comment">//registry.mirror.cqupt.edu.cn</span></div><div class="line">  npmMirror  https:<span class="comment">//skimdb.npmjs.com/registry</span></div></pre></td></tr></table></figure>
<blockquote>
<p><code>nrm use npm</code></p>
<p><code>nrm add</code> 添加源</p>
<p><code>nrm del</code> 删除源</p>
<p><code>nrm test</code> 测试源的响应时间，可以作为使用哪个源的参考</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 包相关 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nrm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue组件学习]]></title>
      <url>/2017/03/12/vue%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<blockquote>
<h1 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h1></blockquote>
<p>组件（Component）是 Vue.js 最强大的功能之一。<br>组件可以扩展 HTML 元素，封装可重用的代码。<br>组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树：</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2017/01/components.png" alt="组件数" title="组件树"></p>
<a id="more"></a>
<blockquote>
<h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2></blockquote>
<p>注册一个全局组件<strong>语法</strong>格式如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Vue.component(tagName, options)</div></pre></td></tr></table></figure>
<p><code>tagName</code> 为组件名，<code>options</code> 为配置选项。注册后，我们可以使用以下方式来调用组件：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;tagName&gt;<span class="xml"><span class="tag">&lt;/<span class="name">tagName</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p><strong>全局组件实例</strong></p>
<p>所有实例都能用全局组件。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//注册一个简单的全局组件 runoob，并使用它：</div><div class="line">&lt;div id="app"&gt;</div><div class="line">    &lt;runoob&gt;&lt;/runoob&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"> </div><div class="line">&lt;script&gt;</div><div class="line">// 注册</div><div class="line">Vue.component('runoob', &#123;</div><div class="line">  template: '&lt;h1&gt;自定义组件!&lt;/h1&gt;'</div><div class="line">&#125;)</div><div class="line">// 创建根实例</div><div class="line">new Vue(&#123;</div><div class="line">  el: '#app'</div><div class="line">&#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<blockquote>
<h2 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h2></blockquote>
<p>我们也可以在实例选项中注册局部组件，这样组件只能在这个实例中使用：</p>
<p><strong>局部组件实例</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//注册一个简单的局部组件 runoob，并使用它：</div><div class="line">&lt;div id="app"&gt;</div><div class="line">    &lt;runoob&gt;&lt;/runoob&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"> </div><div class="line">&lt;script&gt;</div><div class="line">var Child = &#123;</div><div class="line">  template: '&lt;h1&gt;自定义组件!&lt;/h1&gt;'</div><div class="line">&#125;</div><div class="line"> </div><div class="line">// 创建根实例</div><div class="line">new Vue(&#123;</div><div class="line">  el: '#app',</div><div class="line">  components: &#123;</div><div class="line">    // &lt;runoob&gt; 将只在父模板可用</div><div class="line">    'runoob': Child</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<blockquote>
<h2 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h2></blockquote>
<p>prop 是父组件用来传递数据的一个自定义属性。</p>
<p>父组件的数据需要通过 props 把数据传给子组件，子组件需要显式地用 props 选项声明 “prop”：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;div id="app"&gt;</div><div class="line">    &lt;child message="hello!"&gt;&lt;/child&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"> </div><div class="line">&lt;script&gt;</div><div class="line">//注册</div><div class="line">Vue.component('child', &#123;</div><div class="line">  // 声明 props</div><div class="line">  props: ['message'],</div><div class="line">  // 同样也可以在 vm 实例中像 "this.message" 这样使用</div><div class="line">  template: '&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;'</div><div class="line">&#125;)</div><div class="line">// 创建根实例</div><div class="line">new Vue(&#123;</div><div class="line">  el: '#app'</div><div class="line">&#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p><strong>Tips:</strong></p>
<p><strong>props:[‘info’]<font color="deeppink">在方法中使用this.info访问，在模板中使用</font></strong></p>
<blockquote>
<h3 id="动态Prop"><a href="#动态Prop" class="headerlink" title="动态Prop"></a>动态Prop</h3></blockquote>
<p>类似于用 v-bind 绑定 HTML 特性到一个表达式，也可以用 v-bind 动态绑定 props 的值到父组件的数据中。每当父组件的数据变化时，该变化也会传导给子组件：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">"app"</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"parentMsg"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">child</span> <span class="attr">v-bind:message</span>=<span class="string">"parentMsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="comment">// 注册</span></div><div class="line">Vue.component(<span class="string">'child'</span>, &#123;</div><div class="line">  <span class="comment">// 声明 props</span></div><div class="line">  props: [<span class="string">'message'</span>],</div><div class="line">  <span class="comment">// 同样也可以在 vm 实例中像 "this.message" 这样使用</span></div><div class="line">  template: <span class="string">'&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;'</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">// 创建根实例</span></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">parentMsg</span>: <span class="string">'父组件内容'</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2></blockquote>
<p>父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，就需要使用自定义事件！<br>我们可以使用 v-on 绑定自定义事件, 每个 Vue 实例都实现了事件接口(Events interface)，即：</p>
<ul>
<li>使用 <code>$on(eventName)</code> 监听事件</li>
<li>使用 <code>$emit(eventName)</code> 触发事件</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;div id="app"&gt;</div><div class="line">        &lt;login v-on:send="getData"&gt;&lt;/login&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">    // vue对象默认可以看成是一个跟组件</div><div class="line">    var vm = new Vue(&#123;</div><div class="line">        el: '#app',</div><div class="line">        methods: &#123;</div><div class="line">            getData: function (id) &#123;</div><div class="line">                alert(id)</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        components: &#123;</div><div class="line">            'login': &#123;</div><div class="line">                template: '这是个login组件----&lt;button @click="sendData"&gt;点击以后子组件向父组件传值&lt;/button&gt;',</div><div class="line">                //data必须是个函数，否则报错</div><div class="line">                data:function()&#123;</div><div class="line">                    return &#123;</div><div class="line">                        id:12</div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                methods: &#123;</div><div class="line">                    sendData: function () &#123;</div><div class="line">                        this.$emit('send', this.id)</div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">"app"</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"counter-event-example"</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">button-counter</span> <span class="attr">v-on:increment</span>=<span class="string">"incrementTotal"</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">button-counter</span> <span class="attr">v-on:increment</span>=<span class="string">"incrementTotal"</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">Vue.component(<span class="string">'button-counter'</span>, &#123;</div><div class="line">  <span class="attr">template</span>: <span class="string">'&lt;button v-on:click="increment"&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;'</span>,</div><div class="line">  <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">counter</span>: <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">methods</span>: &#123;</div><div class="line">    <span class="attr">increment</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.counter += <span class="number">1</span></div><div class="line">      <span class="keyword">this</span>.$emit(<span class="string">'increment'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">&#125;)</div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">el</span>: <span class="string">'#counter-event-example'</span>,</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">total</span>: <span class="number">0</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">methods</span>: &#123;</div><div class="line">    <span class="attr">incrementTotal</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.total += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果你想在某个组件的根元素上监听一个原生事件。可以使用 .native 修饰 v-on 。例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;my-component v-on:click.native=<span class="string">"doTheThing"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Vue.js学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue.js </tag>
            
            <tag> vue组件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue指令学习]]></title>
      <url>/2017/03/05/vue%E6%8C%87%E4%BB%A4/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Vue指令</p>
</blockquote>
<p>指令 (Directives) 是特殊的带有前缀 v- 的特性。指令的值限定为绑定表达式，因此上面提到的 JavaScript 表达式及过滤器规则在这里也适用。指令的职责就是当其表达式的值改变时把某些特殊的行为应用到 DOM 上。</p>
<p>在Vue中，常用的指令有v-text、v-html、v-if、v-show、v-for、v-on、v-bind、v-model、v-ref、v-el、v-pre、v-cloak。</p>
<a id="more"></a>
<p>先上代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">            <span class="selector-class">.item</span> &#123;</div><div class="line">                <span class="attribute">margin</span>: <span class="number">1px</span>;</div><div class="line">                <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="selector-class">.item</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">                <span class="attribute">background</span>: <span class="number">#cccccc</span>;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dr01"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-text<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">"msgText"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msgText&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-html<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"msgHtml"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;&#123;msgHtml&#125;&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-if<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>msgBoolean01:true<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"msgBoolean01"</span>&gt;</span>(here is v-if code block)if msgBoolean01 is true show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>(here is v-else code block)if msgBoolean01 is false show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>msgBoolean01:false<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"msgBoolean02"</span>&gt;</span>(here is v-if code block)if msgBoolean02 is true show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>(here is v-else code block)if msgBoolean02 is false show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>template v-if<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>msgBoolean01:true<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"msgBoolean01"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>(here is template v-if code block)if msgBoolean01 is true show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>(here is template v-else code block)if msgBoolean01 is false show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>msgBoolean02:false<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"msgBoolean02"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>(here is template v-if code block)if msgBoolean02 is true show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>(here is template v-else code block)if msgBoolean02 is false show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-show<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>msgBoolean01:true<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"msgBoolean01"</span>&gt;</span>(here is v-show code block)if msgBoolean01 is true show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>(here is v-else code block)if msgBoolean01 is false show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>msgBoolean01:false<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"msgBoolean02"</span>&gt;</span>(here is v-show code block)if msgBoolean02 is true show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>(here is v-else code block)if msgBoolean02 is false show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-else（不需要表达式）<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>限制：前一兄弟必须有v-if或者v-show<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>v-else的用法：上面三个例子中都有使用，请参考代码<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-for<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>遍历数组：<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(index,item) in itemArrs"</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- index代表的是当前item的下标，如果要取出下标的值则用&#123;&#123;$index&#125;&#125;即可 --&gt;</span></div><div class="line">                index:&#123;&#123;$index&#125;&#125;, item:&#123;&#123;item&#125;&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>遍历对象key、value（不带下标index）<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(key,value) in itemObjs"</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- </span></div><div class="line">                    key代表的是当前对象的属性名称，value代表的是当前对象的属性值</div><div class="line">                    key取值的时候可以用&#123;&#123;$key&#125;&#125;，也可以使用&#123;&#123;key&#125;&#125;</div><div class="line">                    value取值的时候只能用&#123;&#123;value&#125;&#125;</div><div class="line">                    建议：遍历对象不带index下标的时候同时用&#123;&#123;key&#125;&#125;和&#123;&#123;value&#125;&#125;</div><div class="line">                 --&gt;</div><div class="line">                $key:&#123;&#123;$key&#125;&#125;,key:&#123;&#123;key&#125;&#125;, value:&#123;&#123;value&#125;&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>遍历对象key、value（带下标index）<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(index,key,value) in itemObjs"</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- </span></div><div class="line">                    index代表的是当前属性的下标，key代表的是当前对象的属性名称，value代表的是当前对象的属性值</div><div class="line">                    index取值的时候只能用&#123;&#123;$index&#125;&#125;</div><div class="line">                    key取值的时候只能用&#123;&#123;$key&#125;&#125;</div><div class="line">                    value取值的时候只能用&#123;&#123;value&#125;&#125;</div><div class="line">                    建议：遍历对象不带index下标的时候同时用&#123;&#123;key&#125;&#125;和&#123;&#123;value&#125;&#125;</div><div class="line">                 --&gt;</div><div class="line">                $index:&#123;&#123;$index&#125;&#125;, $key:&#123;&#123;$key&#125;&#125;, value:&#123;&#123;value&#125;&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-on<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(index,item) in itemArrs"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-on:click</span>=<span class="string">"itemClick01"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>index:&#123;&#123;$index&#125;&#125;, item:&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"itemClick02($index,item)"</span>&gt;</span>内联语句（参数item参数）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"itemClick03(item,$event)"</span>&gt;</span>内联语句（参数event参数）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.stop</span>=<span class="string">"itemClickStop(item)"</span>&gt;</span>阻止冒泡<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span>跳转到百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">v-on:click.prevent</span>=<span class="string">"itemClickPrevent()"</span>&gt;</span>阻止a标签默认行为，不会跳转到百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"keyUpEnter($event)"</span> <span class="attr">placeholder</span>=<span class="string">"获取焦点后点击enter试试"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-bind<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 绑定 attribute --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imageSrc"</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="comment">&lt;!-- 缩写 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imageSrc"</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="comment">&lt;!-- 绑定 class --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123; red: isRed &#125;"</span>&gt;</span>对象class<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[classA, classB]"</span>&gt;</span>数组class<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[classA, &#123; classB: isB, classC: isC &#125;]"</span>&gt;</span>对象数组class混用<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="comment">&lt;!-- 绑定 style --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123; fontSize: size + 'px' &#125;"</span>&gt;</span>对象style<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"[styleObjectA, styleObjectB]"</span> <span class="attr">style</span>=<span class="string">"background-color: ;"</span>&gt;</span>数组style<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> dr01 = <span class="keyword">new</span> Vue(&#123;</div><div class="line">                <span class="attr">el</span>: <span class="string">"#dr01"</span>,</div><div class="line">                <span class="attr">data</span>: &#123;</div><div class="line">                    <span class="attr">msgText</span>: <span class="string">"this is msgText!"</span>,</div><div class="line">                    <span class="attr">msgHtml</span>: <span class="string">'&lt;span style="color:red;"&gt;this is msgHtml&lt;/span&gt;'</span>,</div><div class="line">                    <span class="attr">msgBoolean01</span>: <span class="literal">true</span>,</div><div class="line">                    <span class="attr">msgBoolean02</span>: <span class="literal">false</span>,</div><div class="line">                    <span class="attr">itemArrs</span>: [<span class="string">"item A"</span>, <span class="string">"item B"</span>, <span class="string">"item C"</span>, <span class="string">"item D"</span>],</div><div class="line">                    <span class="attr">itemObjs</span>: &#123;</div><div class="line">                        <span class="attr">key01</span>: <span class="string">"this is value01"</span>,</div><div class="line">                        <span class="attr">key02</span>: <span class="string">"this is value02"</span>,</div><div class="line">                        <span class="attr">key03</span>: <span class="string">"this is value03"</span></div><div class="line">                    &#125;,</div><div class="line">                    <span class="attr">imageSrc</span>: <span class="string">"img/favicon.ico"</span>,</div><div class="line">                    <span class="attr">isRed</span>: <span class="literal">true</span>,</div><div class="line">                    <span class="attr">classA</span>: <span class="string">"class-a"</span>,</div><div class="line">                    <span class="attr">classB</span>: <span class="string">"class-b"</span>,</div><div class="line">                    <span class="attr">isB</span>: <span class="literal">true</span>,</div><div class="line">                    <span class="attr">isC</span>: <span class="literal">true</span>,</div><div class="line">                    <span class="attr">size</span>: <span class="string">"14"</span>,</div><div class="line">                    <span class="attr">styleObjectA</span>: &#123;</div><div class="line">                        <span class="attr">backgroundColor</span>: <span class="string">"#cccccc"</span></div><div class="line">                    &#125;,</div><div class="line">                    <span class="attr">styleObjectB</span>: &#123;</div><div class="line">                        <span class="attr">color</span>: <span class="string">"red"</span></div><div class="line">                    &#125;,</div><div class="line">                &#125;,</div><div class="line">                <span class="attr">methods</span>: &#123;</div><div class="line">                    <span class="comment">//方法处理器</span></div><div class="line">                    itemClick01: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                        <span class="built_in">console</span>.log(<span class="string">"u clicked the parent div"</span>);</div><div class="line">                    &#125;,</div><div class="line">                    <span class="comment">//内联语句</span></div><div class="line">                    itemClick02: <span class="function"><span class="keyword">function</span>(<span class="params">index, item</span>) </span>&#123;</div><div class="line">                        <span class="built_in">console</span>.log(<span class="string">"current index: "</span> + index + <span class="string">"; item: "</span> + item);</div><div class="line">                    &#125;,</div><div class="line">                    <span class="comment">//event参数传递</span></div><div class="line">                    itemClick03: <span class="function"><span class="keyword">function</span>(<span class="params">item, event</span>) </span>&#123;</div><div class="line">                        <span class="built_in">console</span>.log(<span class="string">"current item: "</span> + item + <span class="string">"; event target tagName: "</span> + event.target.tagName);</div><div class="line">                    &#125;,</div><div class="line">                    <span class="comment">//阻止冒泡</span></div><div class="line">                    itemClickStop: <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">                        <span class="built_in">console</span>.log(<span class="string">"child button is clicked, please watch whether the parent div's log is priented!"</span>)</div><div class="line">                    &#125;,</div><div class="line">                    <span class="comment">//阻止默认的行为</span></div><div class="line">                    itemClickPrevent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                        <span class="built_in">console</span>.log(<span class="string">"Prevent Default behaviour"</span>);</div><div class="line">                    &#125;,</div><div class="line">                    <span class="comment">//点击</span></div><div class="line">                    keyUpEnter: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">                        <span class="built_in">console</span>.log(<span class="string">"keyCode: "</span> + event.keyCode);</div><div class="line">                    &#125;,</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<h2 id="v-if与v-else"><a href="#v-if与v-else" class="headerlink" title="v-if与v-else"></a>v-if与v-else</h2></blockquote>
<p>根据条件判断结果渲染页面，也就是说只会渲染if和else里面的一个</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-if<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>msgBoolean01:true<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"msgBoolean01"</span>&gt;</span>(here is v-if code block)if msgBoolean01 is true show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>(here is v-else code block)if msgBoolean01 is false show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>msgBoolean01:false<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"msgBoolean02"</span>&gt;</span>(here is v-if code block)if msgBoolean02 is true show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>(here is v-else code block)if msgBoolean02 is false show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<h2 id="template-v-if与template-v-else"><a href="#template-v-if与template-v-else" class="headerlink" title="template v-if与template v-else"></a>template v-if与template v-else</h2></blockquote>
<p>根据条件判断结果渲染页面，也就是说只会渲染if和else里面的一个</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>template v-if<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>msgBoolean01:true<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"msgBoolean01"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>(here is template v-if code block)if msgBoolean01 is true show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>(here is template v-else code block)if msgBoolean01 is false show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>msgBoolean02:false<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"msgBoolean02"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>(here is template v-if code block)if msgBoolean02 is true show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>(here is template v-else code block)if msgBoolean02 is false show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<h2 id="v-text-更新元素的textContent"><a href="#v-text-更新元素的textContent" class="headerlink" title="v-text: 更新元素的textContent"></a>v-text: 更新元素的textContent</h2></blockquote>
<p>在内部，<code>大括号大括号Mustache大括号大括号</code>插值也被编译为textNode的一个v-text指令，所以下面两个span渲染结果一致</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-text<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">"msgText"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msgText&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<h2 id="v-html：更新元素的-innerHTML"><a href="#v-html：更新元素的-innerHTML" class="headerlink" title="v-html：更新元素的 innerHTML"></a>v-html：更新元素的 innerHTML</h2></blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-html<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"msgHtml"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;&#123;msgHtml&#125;&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-html<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"msgHtml"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;&#123;msgHtml&#125;&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<h2 id="v-show与v-else"><a href="#v-show与v-else" class="headerlink" title="v-show与v-else"></a>v-show与v-else</h2></blockquote>
<p>v-show的语句与v-if不同，不论判断条件结果如何，都会渲染整个html页面，只是将判断结果为false的那个节点加上style=”display:none;”</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-show<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>msgBoolean01:true<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"msgBoolean01"</span>&gt;</span>(here is v-show code block)if msgBoolean01 is true show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>(here is v-else code block)if msgBoolean01 is false show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>msgBoolean01:false<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"msgBoolean02"</span>&gt;</span>(here is v-show code block)if msgBoolean02 is true show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>(here is v-else code block)if msgBoolean02 is false show this div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<h2 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h2></blockquote>
<p>不需要表达式，但是使用的前提条件是前面的兄弟节点必须是v-if或者v-show</p>
<blockquote>
<h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2></blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>遍历数组：<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(index,item) in itemArrs"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- index代表的是当前item的下标，如果要取出下标的值则用&#123;&#123;$index&#125;&#125;即可 --&gt;</span></div><div class="line">        index:&#123;&#123;$index&#125;&#125;, item:&#123;&#123;item&#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>遍历对象key、value（不带下标index）<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(key,value) in itemObjs"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- </span></div><div class="line">            key代表的是当前对象的属性名称，value代表的是当前对象的属性值</div><div class="line">            key取值的时候可以用&#123;&#123;$key&#125;&#125;，也可以使用&#123;&#123;key&#125;&#125;</div><div class="line">            value取值的时候只能用&#123;&#123;value&#125;&#125;</div><div class="line">            建议：遍历对象不带index下标的时候同时用&#123;&#123;key&#125;&#125;和&#123;&#123;value&#125;&#125;</div><div class="line">         --&gt;</div><div class="line">        $key:&#123;&#123;$key&#125;&#125;,key:&#123;&#123;key&#125;&#125;, value:&#123;&#123;value&#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>遍历对象key、value（带下标index）<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(index,key,value) in itemObjs"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- </span></div><div class="line">            index代表的是当前属性的下标，key代表的是当前对象的属性名称，value代表的是当前对象的属性值</div><div class="line">            index取值的时候只能用&#123;&#123;$index&#125;&#125;</div><div class="line">            key取值的时候只能用&#123;&#123;$key&#125;&#125;</div><div class="line">            value取值的时候只能用&#123;&#123;value&#125;&#125;</div><div class="line">            建议：遍历对象不带index下标的时候同时用&#123;&#123;key&#125;&#125;和&#123;&#123;value&#125;&#125;</div><div class="line">         --&gt;</div><div class="line">        $index:&#123;&#123;$index&#125;&#125;, $key:&#123;&#123;$key&#125;&#125;, value:&#123;&#123;value&#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">itemArrs和itemObjs定义如下：</div><div class="line"></div><div class="line">itemArrs: ["item A", "item B", "item C", "item D"],</div><div class="line">itemObjs: &#123;</div><div class="line">    key01: "this is value01",</div><div class="line">    key02: "this is value02",</div><div class="line">    key03: "this is value03"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果:</code></p>
<p><img src="http://images2015.cnblogs.com/blog/954416/201605/954416-20160520161201638-1098691246.png" alt="&#39;结果&#39;"></p>
<blockquote>
<h2 id="v-on-绑定事件"><a href="#v-on-绑定事件" class="headerlink" title="v-on: 绑定事件"></a>v-on: 绑定事件</h2></blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-on<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(index,item) in itemArrs"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-on:click</span>=<span class="string">"itemClick01"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>index:&#123;&#123;$index&#125;&#125;, item:&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"itemClick02($index,item)"</span>&gt;</span>内联语句（参数item参数）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"itemClick03(item,$event)"</span>&gt;</span>内联语句（参数event参数）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.stop</span>=<span class="string">"itemClickStop(item)"</span>&gt;</span>阻止冒泡<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span>跳转到百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">v-on:click.prevent</span>=<span class="string">"itemClickPrevent()"</span>&gt;</span>阻止a标签默认行为，不会跳转到百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"keyUpEnter($event)"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>定义在vue的methods</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">    <span class="comment">//方法处理器</span></div><div class="line">    itemClick01: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"u clicked the button"</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//内联语句</span></div><div class="line">    itemClick02: <span class="function"><span class="keyword">function</span>(<span class="params">index, item</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"current index: "</span> + index + <span class="string">"; item: "</span> + item);</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//event参数传递</span></div><div class="line">    itemClick03: <span class="function"><span class="keyword">function</span>(<span class="params">item, event</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"current item: "</span> + item + <span class="string">"; event target tagName: "</span> + event.target.tagName);</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//阻止冒泡</span></div><div class="line">    itemClickStop: <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"child button is clicked, please watch whether the parent div's log is priented!"</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//阻止默认的行为</span></div><div class="line">    itemClickPrevent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Prevent Default behaviour"</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//点击</span></div><div class="line">    keyUpEnter: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"keyCode: "</span> + event.keyCode);</div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简单介绍：</p>
<p>通过v-for来遍历items，div内的span标签是遍历的结果，后面紧跟了几个点击事件：</p>
<p>div上的itemClick01是方法处理器</p>
<p>itemClick02是可以传递当前item值的内联语句</p>
<p>itemClick03是可以传递当前item的event事件的内联语句</p>
<p>itemClickStop是阻止冒泡，即相应完当前标签的事件后，阻止点击事件传递到上层div</p>
<p>itemClickPrevent是阻止默认行为，a标签本身是跳转到其他页面，加上itemClickPrevent后阻止了打开新页面的行为</p>
<p>keyUpEnter是响应enter键的事件，但是前提是光标是当前input内</p>
<p>页面显示结果如下（定义了item的hover，当前鼠标悬停在第二个item上）</p>
<p><img src="http://images2015.cnblogs.com/blog/954416/201605/954416-20160520153416982-1368804386.png" alt="&#39;效果&#39;"></p>
<p>点击“内联语句（参数item参数）”</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">current item: item B; event target tagName: BUTTON</div><div class="line">u clicked the parent div</div></pre></td></tr></table></figure>
<p>点击“阻止冒泡”</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">child button is clicked, please watch whether the parent div<span class="string">'s log is priented!</span></div></pre></td></tr></table></figure>
<p>点击“跳转到百度”：跳转到了百度页面。</p>
<p>点击“阻止a标签默认行为，不会跳转到百度”：没有响应</p>
<p>点击“input标签”： <code>u clicked the parent div</code> ，并点击enter键： <code>keyCode: 13</code></p>
<blockquote>
<h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2></blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-bind<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 绑定 attribute --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imageSrc"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 缩写 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imageSrc"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 绑定 class --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123; red: isRed &#125;"</span>&gt;</span>对象class<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[classA, classB]"</span>&gt;</span>数组class<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[classA, &#123; classB: isB, classC: isC &#125;]"</span>&gt;</span>对象数组class混用<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 绑定 style --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123; fontSize: size + 'px' &#125;"</span>&gt;</span>对象style<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"[styleObjectA, styleObjectB]"</span>&gt;</span>数组style<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">data中的定义</div><div class="line"></div><div class="line">imageSrc: <span class="string">"img/favicon.ico"</span>,</div><div class="line"><span class="attr">isRed</span>: <span class="literal">true</span>,</div><div class="line"><span class="attr">classA</span>: <span class="string">"class-a"</span>,</div><div class="line"><span class="attr">classB</span>: <span class="string">"class-b"</span>,</div><div class="line"><span class="attr">isB</span>: <span class="literal">true</span>,</div><div class="line"><span class="attr">isC</span>: <span class="literal">true</span>,</div><div class="line"><span class="attr">size</span>: <span class="string">"14"</span>,</div><div class="line"><span class="attr">styleObjectA</span>: &#123;</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">"#cccccc"</span></div><div class="line">&#125;,</div><div class="line"><span class="attr">styleObjectB</span>: &#123;</div><div class="line">    <span class="attr">color</span>: <span class="string">"red"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 展示结果：</p>
<p> <img src="http://images2015.cnblogs.com/blog/954416/201605/954416-20160520155837732-1703118032.png" alt="&#39;效果&#39;"></p>
<blockquote>
<h2 id="v-el"><a href="#v-el" class="headerlink" title="v-el"></a>v-el</h2></blockquote>
<p> <code>用法：</code><br> 在其所有者Vue实例的$els对象上注册对DOM元素的引用，以便于访问。</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-el:msg</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-el:other-msg</span>&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">this.$els.msg.textContent // -&gt; "hello"</div><div class="line">this.$els.otherMsg.textContent // -&gt; "world"</div></pre></td></tr></table></figure>
<blockquote>
<h2 id="v-ref"><a href="#v-ref" class="headerlink" title="v-ref"></a>v-ref</h2></blockquote>
<p> 注册对父项的子组件的引用，以便直接访问。不期待一个表达。必须提供一个参数作为注册的id。组件实例将可以在其父$refs对象上访问。</p>
<p>当与组件一起使用时v-for，注册的值将是包含与其绑定到的Array相对应的所有子组件实例的Array。如果数据源v-for是一个Object，则注册的值将是包含镜像源对象的键 - 实例对的Object。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--html--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">v-ref:child</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">v-ref:some-child</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//js</span></div><div class="line"><span class="comment">// access from parent:</span></div><div class="line"><span class="keyword">this</span>.$refs.child</div><div class="line"><span class="keyword">this</span>.$refs.someChild</div></pre></td></tr></table></figure>
<p>和 v-for 使用</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--html--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">v-ref:list</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//js</span></div><div class="line"><span class="comment">// this will be an array in parent</span></div><div class="line"><span class="keyword">this</span>.$refs.list</div></pre></td></tr></table></figure>
<p><strong>在vue2的版本中，v-ref和v-el都被 ref指令代替</strong></p>
<h2 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h2><p>v-pre标签内不解析</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123; this will not be compiled &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Vue.js学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue指令，Vue.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue中的v-if和v-show]]></title>
      <url>/2016/10/11/v-if%E5%92%8Cv-show/</url>
      <content type="html"><![CDATA[<blockquote>
<h2 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h2></blockquote>
<p>都是动态显示DOM元素</p>
<blockquote>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2></blockquote>
<ol>
<li>手段：v-if是动态的向DOM树内添加或者删除DOM元素；v-show是通过设置DOM元素的display样式属性控制显隐；</li>
<li>编译过程：v-if切换有<code>一个局部编译/卸载的过程</code>，切换过程中<code>合适地销毁和重建内部的事件监听和子组件</code>；v-show只是简单的基于css切换；</li>
<li>编译条件：v-if是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译（编译被缓存？编译被缓存后，然后再切换的时候进行局部卸载); v-show是在任何条件下（首次条件是否为真）都被编译，然后被缓存，而且DOM元素保留；</li>
<li>性能消耗：v-if有更高的切换消耗；v-show有更高的初始渲染消耗；</li>
<li>使用场景：v-if适合运营条件不大可能改变；v-show适合频繁切换。</li>
</ol>
<a id="more"></a>
<blockquote>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2></blockquote>
<p>如果v-show作用的元素，css文件中display:none，通过v-show进行设置不能显示该元素；</p>
<p>原因：<code>v-show控制显隐，是通过js代码去修改元素的element style</code>，如果value为false，设置display: none;<code>如果value为true，设置display: &#39;&#39;</code>；于是value为true时，只能将element style中的display效果清除，并不能覆盖css中的display效果；<br>如下图所示，value=true时，v-show改变的是element.style，由于无效，显示效果由css文件中的display决定。</p>
<p><img src="http://images2015.cnblogs.com/blog/605230/201604/605230-20160422103435320-1044614315.png" alt="一个图"></p>
<blockquote>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2></blockquote>
<p>使用v-show的话，在vue解析之前隐藏DOM的话，尽量在style属性里面设置display的值，不要在css文件中。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;ul v-touch:tap="message=2" style="display: none" v-show="show"&gt;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Vue.js学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue.js </tag>
            
            <tag> v-if </tag>
            
            <tag> v-show </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows不能在本地计算机启动Apache]]></title>
      <url>/2016/10/02/apache%E4%B8%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E5%90%AF%E5%8A%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>遇到的问题</p>
</blockquote>
<p>在使用集成环境 WampServer 的时候，发现其图标为黄色， 却还显示 Server Online。</p>
<p>而且在本地计算机不能启动 Apache 服务。</p>
<p><img src="http://images2015.cnblogs.com/blog/967994/201606/967994-20160601094713774-1217915735.jpg" alt="本地启动wampapache失败" title="本地启动wampapache失败"></p>
<blockquote>
<p>解决</p>
</blockquote>
<p><code>1.</code>切换到你的apache的bin目录下，按住shift和鼠标右键，打开命令窗口，执行httpd.exe，看有什么提示。</p>
<p><img src="http://images2015.cnblogs.com/blog/967994/201606/967994-20160601094907133-959353004.jpg" alt="命令窗口" title="命令窗口"></p>
<p><code>2.</code> 根据错误提示，修改相应的信息。比如我的是ServerRoot must be a valid directory,就是说安装目录不能有中文，因此要改安装目录的名称全为英文。</p>
<p><code>3.</code> 修改问题之后，window + R 输入 services.msc，找到 wampapache 右键管理，重新启动即可。</p>
]]></content>
      
        
        <tags>
            
            <tag> Apache </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js获取url传递参数,js获取url？号后面的参数]]></title>
      <url>/2016/07/23/%E6%88%AA%E5%8F%96url/</url>
      <content type="html"><![CDATA[<p>我们在写项目的时候往往会需要获取 url 或截取 url ? 后的参数，为了方便，总结了以下几种方法:</p>
<blockquote>
<p>方法一: 利用正则表达式</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryString</span>(<span class="params">name</span>) </span>&#123; </div><div class="line">        <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>, <span class="string">"i"</span>); </div><div class="line">        <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg); </div><div class="line">        <span class="keyword">if</span> (r != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]); </div><div class="line">        <span class="keyword">return</span> <span class="literal">null</span>; </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>方法二:  获取 url 中 “?” 符号后的字串</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetRequest</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">   <span class="keyword">var</span> url = location.search; <span class="comment">//获取url中"?"符后的字串  </span></div><div class="line">   <span class="keyword">var</span> theRequest = <span class="keyword">new</span> <span class="built_in">Object</span>();  </div><div class="line">   <span class="keyword">if</span> (url.indexOf(<span class="string">"?"</span>) != <span class="number">-1</span>) &#123;  </div><div class="line">      <span class="keyword">var</span> str = url.substr(<span class="number">1</span>);  </div><div class="line">      strs = str.split(<span class="string">"&amp;"</span>);  </div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; strs.length; i ++) &#123;  </div><div class="line">         theRequest[strs[i].split(<span class="string">"="</span>)[<span class="number">0</span>]]=<span class="built_in">unescape</span>(strs[i].split(<span class="string">"="</span>)[<span class="number">1</span>]);  </div><div class="line">      &#125;  </div><div class="line">   &#125;  </div><div class="line">   <span class="keyword">return</span> theRequest;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>方法三:  获取<strong>指定</strong>的 url 参数值 </p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * 获取指定的URL参数值 </div><div class="line"> * URL:http://.../index?name=hudada </div><div class="line"> * 参数：paramName URL参数 </div><div class="line"> * 调用方法:getParam("name") </div><div class="line"> * 返回值:hudada</div><div class="line"> */ </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getParam</span>(<span class="params">paramName</span>) </span>&#123; </div><div class="line">    paramValue = <span class="string">""</span>, isFound = !<span class="number">1</span>; </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.location.search.indexOf(<span class="string">"?"</span>) == <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.location.search.indexOf(<span class="string">"="</span>) &gt; <span class="number">1</span>) &#123; </div><div class="line">        arrSource = <span class="built_in">unescape</span>(<span class="keyword">this</span>.location.search).substring(<span class="number">1</span>, <span class="keyword">this</span>.location.search.length).split(<span class="string">"&amp;"</span>), i = <span class="number">0</span>; </div><div class="line">        <span class="keyword">while</span> (i &lt; arrSource.length &amp;&amp; !isFound) arrSource[i].indexOf(<span class="string">"="</span>) &gt; <span class="number">0</span> &amp;&amp; arrSource[i].split(<span class="string">"="</span>)[<span class="number">0</span>].toLowerCase() == paramName.toLowerCase() &amp;&amp; (paramValue = arrSource[i].split(<span class="string">"="</span>)[<span class="number">1</span>], isFound = !<span class="number">0</span>), i++ </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> paramValue == <span class="string">""</span> &amp;&amp; (paramValue = <span class="literal">null</span>), paramValue </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<blockquote>
<p>其它参数介绍</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置或获取对象指定的文件名或路径。</span></div><div class="line">alert(<span class="built_in">window</span>.location.pathname);</div><div class="line"></div><div class="line"><span class="comment">//设置或获取整个 URL 为字符串。</span></div><div class="line">alert(<span class="built_in">window</span>.location.href);</div><div class="line"></div><div class="line"><span class="comment">//设置或获取与 URL 关联的端口号码。</span></div><div class="line">alert(<span class="built_in">window</span>.location.port);</div><div class="line"></div><div class="line"><span class="comment">//设置或获取 URL 的协议部分。</span></div><div class="line">alert(<span class="built_in">window</span>.location.protocol);</div><div class="line"></div><div class="line"><span class="comment">//设置或获取 href 属性中在井号“#”后面的分段。</span></div><div class="line">alert(<span class="built_in">window</span>.location.hash);</div><div class="line"></div><div class="line"><span class="comment">//设置或获取 location 或 URL 的 hostname 和 port 号码。</span></div><div class="line">alert(<span class="built_in">window</span>.location.host);</div><div class="line"></div><div class="line"><span class="comment">//设置或获取 href 属性中跟在问号后面的部分。</span></div><div class="line">alert(<span class="built_in">window</span>.location.search);</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> JavaScript学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 截取url </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[a标签点击跳转页面后怎么给当前点击的a标签添加样式]]></title>
      <url>/2016/07/23/a/</url>
      <content type="html"><![CDATA[<p>在写项目的时候碰到一个问题:<br>a标签点击跳转页面后,给当前点击的a标签添加的样式不会显示。<br>怎么解决呢？</p>
<a id="more"></a>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/images/a%E6%A0%87%E7%AD%BE%E7%82%B9%E5%87%BB.png?raw=true" alt="问题样式图" title="问题样式图"></p>
<blockquote>
<p>问题描述</p>
</blockquote>
<p>原本点击仪表盘等标签后，该标签的背景颜色会发生改变，可点击之后，a标签会发生跳转，该标签的背景色也不会再显示。</p>
<p>XML/HTML code：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;aside <span class="class"><span class="keyword">class</span></span>=<span class="string">'aside'</span>&gt;</div><div class="line">		&lt;div class='profile'&gt;</div><div class="line">			&lt;div class='avatar img-circle'&gt;</div><div class="line">				&lt;img src='./uploads/avatar.jpg' alt='您的头像'&gt;	</div><div class="line">			&lt;/div&gt;</div><div class="line">        &lt;h4&gt;&lt;span &gt;胡大大&lt;/span&gt;&lt;/h4&gt;</div><div class="line">		&lt;/div&gt;</div><div class="line">		&lt;div class='navs'&gt;</div><div class="line">			&lt;ul&gt;</div><div class="line">				&lt;li&gt;&lt;a href='dashboard.html'&gt;&lt;i class='fa fa-bar-chart '&gt;&lt;/i&gt;仪表盘&lt;/a&gt;&lt;/li&gt;</div><div class="line">				&lt;li&gt;&lt;a href='#' &gt;&lt;i class='fa fa fa-user'&gt;&lt;/i&gt;用户管理&lt;/a&gt;&lt;/li&gt;</div><div class="line">				&lt;li&gt;&lt;a href='./index.html'&gt;&lt;i class='fa fa-mortar-board'&gt;&lt;/i&gt;讲师管理&lt;/a&gt;&lt;/li&gt;</div><div class="line">				&lt;li&gt;</div><div class="line">					&lt;a href='#' class='course_click'&gt;</div><div class="line">						&lt;i class='fa fa-book'&gt;&lt;/i&gt;课程管理&lt;i class='arrow fa fa-angle-right pull-right'&gt;&lt;/i&gt;</div><div class="line">					&lt;/a&gt;</div><div class="line">					&lt;ul class='course ' style='display:none'&gt;</div><div class="line">						&lt;li&gt;&lt;a href='#'&gt;课程添加&lt;/a&gt;&lt;/li&gt;</div><div class="line">						&lt;li&gt;&lt;a href='#'&gt;课程列表&lt;/a&gt;&lt;/li&gt;</div><div class="line">						&lt;li&gt;&lt;a href='#'&gt;课程分类&lt;/a&gt;&lt;/li&gt;</div><div class="line">						&lt;li&gt;&lt;a href='#'&gt;课程专题&lt;/a&gt;&lt;/li&gt;</div><div class="line">					&lt;/ul&gt;</div><div class="line">				&lt;/li&gt;</div><div class="line">				&lt;li&gt;&lt;a href='#'&gt;&lt;i class='fa fa-link'&gt;&lt;/i&gt;广告管理&lt;/a&gt;&lt;/li&gt;</div><div class="line">				&lt;li&gt;</div><div class="line">					&lt;a href='#'  class='course_click'&gt;</div><div class="line">						&lt;i class='fa fa-cog fa-spin'&gt;&lt;/i&gt;系统设置&lt;i class='arrow fa fa-angle-right pull-right'&gt;&lt;/i&gt;</div><div class="line">					&lt;/a&gt;</div><div class="line">					&lt;ul class='course ' style='display:none'&gt;</div><div class="line">							&lt;li&gt;&lt;a href='#'&gt;网站设置&lt;/a&gt;&lt;/li&gt;</div><div class="line">							&lt;li&gt;&lt;a href='#'&gt;权限管理&lt;/a&gt;&lt;/li&gt;</div><div class="line">					&lt;/ul&gt;</div><div class="line">				&lt;/li&gt;</div><div class="line">			&lt;/ul&gt;</div><div class="line">		&lt;/div&gt;</div><div class="line">	&lt;/aside&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>那么怎么解决呢？</p>
</blockquote>
<p>一般使用以下几种方法:</p>
<ol>
<li><p>用cookie记录这个打开的序列号，然后页面在跳转的时候再读出来。</p>
</li>
<li><p>循环a的链接，然后与location.href去比对，如果相同，或包含有同样字符串序列，则添加className.</p>
</li>
<li><p>给每个页面写一个页面的id值，然后每次判断，有值则addClass</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">给url后面加一个参数，比如a.php？1，取url后面的1，判断对应的是第一个导航添加一个选中的class</div><div class="line">实际网站中，通常用php做页面判断，判断为是，则相应的a解析出来有active样式，判断为否则a中的active样式不解析</div></pre></td></tr></table></figure>
</li>
</ol>
<p>个人比较推荐第二种写法:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法1</span></div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> url = <span class="built_in">window</span>.location.href;</div><div class="line">    $(<span class="string">'.navs li a'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> userUrl = returnFileName($(<span class="keyword">this</span>).attr(<span class="string">'href'</span>)) + returnUrl($(<span class="keyword">this</span>).attr(<span class="string">'href'</span>));</div><div class="line">        <span class="keyword">var</span> windowUrl = returnFileName(url) + returnUrl(url);</div><div class="line">        <span class="keyword">if</span> (userUrl == windowUrl ) &#123;</div><div class="line">            $(<span class="keyword">this</span>).addClass(<span class="string">'active'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="comment">//以下为截取url的方法</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">returnUrl</span>(<span class="params">href</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> number = href.lastIndexOf(<span class="string">"/"</span>);</div><div class="line">        <span class="keyword">return</span> href.substring(number + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">returnFileName</span>(<span class="params">href</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> number1 = href.lastIndexOf(<span class="string">"/"</span>);</div><div class="line">        <span class="keyword">var</span> number2 = href.substring(<span class="number">0</span>, number1).lastIndexOf(<span class="string">"/"</span>);</div><div class="line">        <span class="keyword">return</span> href.substring(number1, number2 + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 推荐这一种写法</span></div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">'.navs li a'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> ($($(<span class="keyword">this</span>))[<span class="number">0</span>].href == <span class="built_in">String</span>(<span class="built_in">window</span>.location))</div><div class="line">                $(<span class="keyword">this</span>).addClass(<span class="string">'active'</span>).attr(<span class="string">'href'</span>, <span class="string">'javascript:void(0);'</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> jQuery技术学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> a标签跳转 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[快速理解JavaScript中apply()和call()的用法和用途]]></title>
      <url>/2016/05/02/apply-call-bind/</url>
      <content type="html"><![CDATA[<p>接触JavaScript 的函数 apply 和 call 时，理解的非常模糊，网上资料枚不胜举，但大多晦涩难懂，整理了一下不理解的地方。</p>
<hr>
<p>在JavaScript中，call、apply和bind是Function对象自带的三个方法，这三个方法的主要作用是改变函数中的this指向。</p>
<h2 id="call、apply、bind方法的共同点和区别"><a href="#call、apply、bind方法的共同点和区别" class="headerlink" title="call、apply、bind方法的共同点和区别"></a>call、apply、bind方法的共同点和区别</h2><ul>
<li>apply 、 call 、bind 三者都是用来改变函数的this对象的指向的；</li>
<li>apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文（函数的每次调用都会拥有一个特殊值——本次调用的上下文（context）——这就是this关键字的值。）；</li>
<li>apply 、 call 、bind 三者都可以利用后续参数传参；</li>
</ul>
<p>bind 是返回对应函数，便于<strong>稍后调用</strong>；apply 、call 则是<strong>立即调用</strong> 。</p>
<hr>
<a id="more"></a>
<h2 id="定义和语法"><a href="#定义和语法" class="headerlink" title="定义和语法"></a>定义和语法</h2><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><ol>
<li><strong>语法:</strong>  call([thisObj[,arg1[, arg2[, [,.argN]]]]])</li>
<li><strong>定义:</strong>  劫持另外一个对象的方法，继承另外一个对象的属性.<pre><code>(调用一个对象的一个方法，以另一个对象替换当前对象。)
</code></pre></li>
<li><p><strong>说明:</strong></p>
<ol>
<li>call 方法可以用来代替另一个对象调用一个方法</li>
<li>call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象.</li>
</ol>
</li>
<li><p><strong>取值:</strong></p>
<ol>
<li>不传，或者传null,undefined， 函数中的this指向window对象</li>
<li>传递另一个函数的函数名，函数中的this指向这个函数的引用</li>
<li>传递字符串、数值或布尔类型等基础类型，函数中的this指向其对应的包装对象，如 String、Number、Boolean</li>
<li>传递一个对象，函数中的this指向这个对象</li>
</ol>
</li>
<li><p><strong>举例:</strong></p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;   </div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);   <span class="comment">//输出函数a中的this对象</span></div><div class="line">&#125;       </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;       </div><div class="line"></div><div class="line"><span class="keyword">var</span> c=&#123;<span class="attr">name</span>:<span class="string">"call"</span>&#125;;    <span class="comment">//定义对象c  </span></div><div class="line"></div><div class="line">a.call();   <span class="comment">//window</span></div><div class="line">a.call(<span class="literal">null</span>);   <span class="comment">//window</span></div><div class="line">a.call(<span class="literal">undefined</span>);   <span class="comment">//window</span></div><div class="line">a.call(<span class="number">1</span>);   <span class="comment">//Number</span></div><div class="line">a.call(<span class="string">''</span>);   <span class="comment">//String</span></div><div class="line">a.call(<span class="literal">true</span>);   <span class="comment">//Boolean</span></div><div class="line">a.call(b);   <span class="comment">//function b()&#123;&#125;</span></div><div class="line">a.call(c);   <span class="comment">//Object</span></div></pre></td></tr></table></figure>
<p>对上面的例子觉得还是晦涩，让我们在来看一个例子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ==&gt;例1</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">class1</span>(<span class="params"></span>)</span>&#123;   </div><div class="line">  <span class="keyword">this</span>.name=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"我是class1内的方法"</span>);   </div><div class="line">  &#125;   </div><div class="line">&#125;   </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">class2</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  class1.call(<span class="keyword">this</span>);  <span class="comment">//此行代码执行后，当前的this指向了class1（也可以说class2继承了class1）   </span></div><div class="line">&#125;   </div><div class="line"></div><div class="line"><span class="keyword">var</span> f=<span class="keyword">new</span> class2();   </div><div class="line">f.name();   <span class="comment">//调用的是class1内的方法，将class1的name方法交给class2使用</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//常用例子 1</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params">x,y</span>)</span>&#123;   </div><div class="line">  <span class="built_in">console</span>.log(x+y);   </div><div class="line">&#125;   </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drink</span>(<span class="params">x,y</span>)</span>&#123;   </div><div class="line">  <span class="built_in">console</span>.log(x-y);   </div><div class="line">&#125;   </div><div class="line">eat.call(drink,<span class="number">3</span>,<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="comment">//输出：5</span></div><div class="line"><span class="comment">//这个例子中的意思就是用 eat 来替换 drink，eat.call(drink,3,2) == eat(3,2) ，所以运行结果为：console.log(5);</span></div><div class="line"><span class="comment">//注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//常用例子2</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;   </div><div class="line">  <span class="keyword">this</span>.name=<span class="string">"animal"</span>;   </div><div class="line">  <span class="keyword">this</span>.showName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);   </div><div class="line">  &#125;   </div><div class="line">&#125;   </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>)</span>&#123;   </div><div class="line">  <span class="keyword">this</span>.name=<span class="string">"dog"</span>;   </div><div class="line">&#125;   </div><div class="line"><span class="keyword">var</span> animal=<span class="keyword">new</span> Animal();   </div><div class="line"><span class="keyword">var</span> dog=<span class="keyword">new</span> Dog();       </div><div class="line"></div><div class="line">animal.showName.call(dog);</div><div class="line"></div><div class="line"><span class="comment">//输出：dog</span></div><div class="line"><span class="comment">//在上面的代码中，我们可以看到Dog里并没有showName方法，那为什么（this.name）的值是dog呢？</span></div><div class="line"></div><div class="line"><span class="comment">//关键就在于最后一段代码（animal.showName.call(dog)），意思是把animal的方法放到dog上执行，也可以说，把animal 的showName()方法放到 dog上来执行，所以this.name 应该是 dog。</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//常用例子3 (继承)</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>)</span>&#123;   </div><div class="line">  <span class="keyword">this</span>.name=name;   </div><div class="line">  <span class="keyword">this</span>.showName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);   </div><div class="line">  &#125;   </div><div class="line">&#125;   </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name</span>)</span>&#123;   </div><div class="line">  Animal.call(<span class="keyword">this</span>,name);   </div><div class="line">&#125;   </div><div class="line"><span class="keyword">var</span> dog=<span class="keyword">new</span> Dog(<span class="string">"Crazy dog"</span>);   </div><div class="line">dog.showName();</div><div class="line"></div><div class="line"><span class="comment">//输出：Crazy dog</span></div><div class="line"><span class="comment">//Animal.call(this) 的意思就是使用 Animal对象代替this对象，那么Dog就能直接调用Animal的所有属性和方法。</span></div></pre></td></tr></table></figure>
<h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><ol>
<li><strong>语法:</strong>  apply([thisObj[,argArray]])</li>
<li><strong>定义:</strong>  应用某一对象的一个方法，用另一个对象替换当前对象。</li>
<li><strong>说明:</strong>  <ul>
<li>如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。</li>
<li>如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数。</li>
</ul>
</li>
<li><strong>call 和 apply 的区别</strong><br>对于 apply、call 二者而言，作用完全一样，只是接受参数的方式不太一样。<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">class1</span>(<span class="params">args1,args2</span>)</span>&#123;       </div><div class="line">  <span class="keyword">this</span>.name=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;      </div><div class="line">   <span class="built_in">console</span>.log(args,args);      </div><div class="line">  &#125;     </div><div class="line">&#125;     </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">class2</span>(<span class="params"></span>)</span>&#123;    </div><div class="line">  <span class="keyword">var</span> args1=<span class="string">"1"</span>;</div><div class="line">  <span class="keyword">var</span> args2=<span class="string">"2"</span>;</div><div class="line">  class1.call(<span class="keyword">this</span>,args1,args2);  </div><div class="line">  <span class="comment">/*或*/</span></div><div class="line">  class1.apply(<span class="keyword">this</span>,[args1,args2]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> c=<span class="keyword">new</span> class2();   </div><div class="line">c.name();</div><div class="line"></div><div class="line">输出：<span class="number">1</span> <span class="number">2</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>call 需要把参数按顺序传递进去，而 apply 则是把参数放在数组里。</strong></p>
<blockquote>
<p>既然两者功能一样，那该用哪个呢？</p>
</blockquote>
<p>在JavaScript 中，某个函数的参数数量是不固定的，因此要说适用条件的话，当你的参数是明确知道数量时用 call ；<br>而不确定的时候用 apply，然后把参数 push 进数组传递进去。当参数数量不确定时，函数内部也可以通过 arguments 这个数组来遍历所有的参数。</p>
<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><ol>
<li>bind是在EcmaScript5中扩展的方法（IE6,7,8不支持）</li>
<li><p>bind() 方法与 apply 和 call 很相似，也是可以改变函数体内 this 的指向。</p>
</li>
<li><p>MDN的解释是：bind()方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind()方法的第一个参数作为 this，传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。</p>
</li>
</ol>
<p><strong>注意</strong>：bind方法的返回值是函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bar=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);   </div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> foo=&#123; </div><div class="line">     <span class="attr">x</span>:<span class="number">3</span>   </div><div class="line">&#125;   </div><div class="line">bar();  </div><div class="line">bar.bind(foo)();</div><div class="line"> <span class="comment">/*或*/</span></div><div class="line"><span class="keyword">var</span> func=bar.bind(foo);   </div><div class="line">func();</div><div class="line"></div><div class="line"><span class="comment">//输出：</span></div><div class="line"><span class="comment">//undefined</span></div><div class="line"><span class="comment">//3</span></div></pre></td></tr></table></figure></p>
<h2 id="深入理解-apply-call-bind"><a href="#深入理解-apply-call-bind" class="headerlink" title="深入理解 apply call bind"></a>深入理解 apply call bind</h2><p>希望通过这篇笔记，更加清晰的提升对三者的理解，并列出一些关于它们的妙用加深记忆.</p>
<h3 id="apply、call"><a href="#apply、call" class="headerlink" title="apply、call"></a>apply、call</h3><p>在 javascript 中，call 和 apply 都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部 this 的指向。</p>
<p>JavaScript 的一大特点是，函数存在「定义时上下文」和「运行时上下文」以及「上下文是可以改变的」这样的概念。<br>先看一个例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fruits</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"> </div><div class="line">fruits.prototype = &#123;</div><div class="line">    <span class="attr">color</span>: <span class="string">"red"</span>,</div><div class="line">    <span class="attr">say</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"My color is "</span> + <span class="keyword">this</span>.color);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> apple = <span class="keyword">new</span> fruits;</div><div class="line">apple.say();    <span class="comment">//My color is red</span></div><div class="line"> <span class="comment">//但是如果我们有一个对象banana= &#123;color : "yellow"&#125; ,</span></div><div class="line"> <span class="comment">//我们不想对它重新定义 say 方法，那么我们可以通过 call 或 apply 用 apple 的 say 方法：</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">banana = &#123;</div><div class="line">    <span class="attr">color</span>: <span class="string">"yellow"</span></div><div class="line">&#125;</div><div class="line">apple.say.call(banana);     <span class="comment">//My color is yellow</span></div><div class="line">apple.say.apply(banana);    <span class="comment">//My color is yellow</span></div><div class="line"><span class="comment">//所以，可以看出 call 和 apply 是为了动态改变 this 而出现的，当一个 object 没有某个方法（本例子中banana没有say方法），</span></div><div class="line"><span class="comment">//但是其他的有（本例子中apple有say方法），我们可以借助call或apply用其它对象的方法来操作。</span></div></pre></td></tr></table></figure>
<h3 id="apply、call-的区别"><a href="#apply、call-的区别" class="headerlink" title="apply、call 的区别"></a>apply、call 的区别</h3><p> 对于 apply、call 二者而言，作用完全一样，只是接受参数的方式不太一样。例如，有一个函数定义如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2</span>) </span>&#123;</div><div class="line">     </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>就可以通过如下方式来调用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">func.call(<span class="keyword">this</span>, arg1, arg2);</div><div class="line">func.apply(<span class="keyword">this</span>, [arg1, arg2])</div></pre></td></tr></table></figure></p>
<p>其中 this 是你想指定的上下文，他可以是任何一个 JavaScript 对象(JavaScript 中一切皆对象)，call 需要<strong>把参数按顺序传递</strong>进去，而 apply 则是<strong>把参数放在数组</strong>里。　　</p>
<p>JavaScript 中，某个函数的参数数量是不固定的，因此要说适用条件的话，当你的参数是明确知道数量时用 call 。<br>而不确定的时候用 apply，然后把参数 push 进数组传递进去。当参数数量不确定时，函数内部也可以通过 arguments 这个数组来遍历所有的参数。</p>
<h3 id="为了巩固加深记忆，下面列举一些常用用法："><a href="#为了巩固加深记忆，下面列举一些常用用法：" class="headerlink" title="为了巩固加深记忆，下面列举一些常用用法："></a>为了巩固加深记忆，下面列举一些常用用法：</h3><blockquote>
<p>1.数组之间追加</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array1 = [<span class="number">12</span> , <span class="string">"foo"</span> , &#123;name <span class="string">"Joe"</span>&#125; , <span class="number">-2458</span>]; </div><div class="line"><span class="keyword">var</span> array2 = [<span class="string">"Doe"</span> , <span class="number">555</span> , <span class="number">100</span>]; </div><div class="line"><span class="built_in">Array</span>.prototype.push.apply(array1, array2); </div><div class="line"><span class="comment">/* array1 值为  [12 , "foo" , &#123;name "Joe"&#125; , -2458 , "Doe" , 555 , 100] */</span></div></pre></td></tr></table></figure>
<blockquote>
<p>获取数组中的最大值和最小值</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span>  numbers = [<span class="number">5</span>, <span class="number">458</span> , <span class="number">120</span> , <span class="number">-215</span> ]; </div><div class="line"><span class="keyword">var</span> maxInNumbers = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, numbers),   <span class="comment">//458</span></div><div class="line">    maxInNumbers = <span class="built_in">Math</span>.max.call(<span class="built_in">Math</span>,<span class="number">5</span>, <span class="number">458</span> , <span class="number">120</span> , <span class="number">-215</span>); <span class="comment">//458</span></div></pre></td></tr></table></figure>
<p>number 本身没有 max 方法，但是 Math 有，我们就可以借助 call 或者 apply 使用其方法。</p>
<blockquote>
<p>3、验证是否是数组（前提是toString()方法没有被重写过）</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">functionisArray(obj)&#123; </div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Array]'</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>4.类（伪）数组使用数组方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> domNodes = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">document</span>.getElementsByTagName(<span class="string">"*"</span>));</div></pre></td></tr></table></figure>
<p>Javascript中存在一种名为伪数组的对象结构。比较特别的是 arguments 对象，还有像调用 getElementsByTagName , document.childNodes 之类的，它们返回NodeList对象都属于伪数组。不能应用 Array下的 push , pop 等方法。</p>
<p>但是我们能通过 Array.prototype.slice.call 转换为真正的数组的带有 length 属性的对象，这样 domNodes 就可以应用 Array 下的所有方法了。</p>
<blockquote>
<p>深入理解运用 apply 、call</p>
</blockquote>
<p>定义一个 log 方法，让它可以代理 console.log 方法，常见的解决方法是：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">msg</span>)　</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(msg);</div><div class="line">&#125;</div><div class="line">log(<span class="number">1</span>);    <span class="comment">//1</span></div><div class="line">log(<span class="number">1</span>,<span class="number">2</span>);    <span class="comment">//1</span></div></pre></td></tr></table></figure>
<p>上面方法可以解决最基本的需求，但是当传入参数的个数是不确定的时候，上面的方法就失效了，这个时候就可以考虑使用 apply 或者 call，注意这里<strong>传入多少个参数是不确定</strong>的，所以使用apply是最好的，方法如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log.apply(<span class="built_in">console</span>, <span class="built_in">arguments</span>);</div><div class="line">&#125;;</div><div class="line">log(<span class="number">1</span>);    <span class="comment">//1</span></div><div class="line">log(<span class="number">1</span>,<span class="number">2</span>);    <span class="comment">//1 2</span></div></pre></td></tr></table></figure>
<p>接下来的要求是给每一个 log 消息添加一个”(app)”的前辍，比如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">log(<span class="string">"hello world"</span>);    <span class="comment">//(app)hello world</span></div></pre></td></tr></table></figure>
<p>该怎么做比较优雅呢?这个时候需要想到arguments参数是个伪数组，通过 Array.prototype.slice.call 转化为标准数组，再使用数组方法unshift，像这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line">  args.unshift(<span class="string">'(app)'</span>);</div><div class="line"> </div><div class="line">  <span class="built_in">console</span>.log.apply(<span class="built_in">console</span>, args);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="bind-1"><a href="#bind-1" class="headerlink" title="bind"></a>bind</h3><p>说完了 apply 和 call ，再来说说bind。bind() 方法与 apply 和 call 很相似，也是可以改变函数体内 this 的指向。</p>
<p>MDN的解释是：bind()方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind()方法的第一个参数作为 this，传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。</p>
<p>直接来看看具体如何使用，在常见的单体模式中，通常我们会使用 _this , that , self 等保存 this ，这样我们可以在改变了上下文之后继续引用到它。 像这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = &#123;</div><div class="line">    <span class="attr">bar</span> : <span class="number">1</span>,</div><div class="line">    <span class="attr">eventBind</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line">        $(<span class="string">'.someClass'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">            <span class="comment">/* Act on the event */</span></div><div class="line">            <span class="built_in">console</span>.log(_this.bar);     <span class="comment">//1</span></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于 Javascript 特有的机制，上下文环境在 eventBind:function(){ } 过渡到 $(‘.someClass’).on(‘click’,function(event) { }) 发生了改变，上述使用变量保存 this 这些方式都是有用的，也没有什么问题。当然使用 bind() 可以更加优雅的解决这个问题：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = &#123;</div><div class="line">    <span class="attr">bar</span> : <span class="number">1</span>,</div><div class="line">    <span class="attr">eventBind</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        $(<span class="string">'.someClass'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">            <span class="comment">/* Act on the event */</span></div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.bar);      <span class="comment">//1</span></div><div class="line">        &#125;.bind(<span class="keyword">this</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上述代码里，bind() 创建了一个函数，当这个click事件绑定在被调用的时候，它的 this 关键词会被设置成被传入的值（这里指调用bind()时传入的参数）。因此，这里我们传入想要的上下文 this(其实就是 foo )，到 bind() 函数中。然后，当回调函数被执行的时候， this 便指向 foo 对象。再来一个简单的栗子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> foo = &#123;</div><div class="line"><span class="attr">x</span>:<span class="number">3</span></div><div class="line">&#125;</div><div class="line">bar(); <span class="comment">// undefined</span></div><div class="line"><span class="keyword">var</span> func = bar.bind(foo);</div><div class="line">func(); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>这里我们创建了一个新的函数 func，当使用 bind() 创建一个绑定函数之后，它被执行的时候，它的 this 会被设置成 foo ， 而不是像我们调用 bar() 时的全局作用域。</p>
<p>有个有趣的问题，如果连续 bind() 两次，亦或者是连续 bind() 三次那么输出的值是什么呢？像这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> foo = &#123;</div><div class="line">    <span class="attr">x</span>:<span class="number">3</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> sed = &#123;</div><div class="line">    <span class="attr">x</span>:<span class="number">4</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> func = bar.bind(foo).bind(sed);</div><div class="line">func(); <span class="comment">//?</span></div><div class="line"> </div><div class="line"><span class="keyword">var</span> fiv = &#123;</div><div class="line">    <span class="attr">x</span>:<span class="number">5</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> func = bar.bind(foo).bind(sed).bind(fiv);</div><div class="line">func(); <span class="comment">//?</span></div></pre></td></tr></table></figure>
<p>答案是，两次都仍将输出 3 ，而非期待中的 4 和 5 。原因是，在Javascript中，多次 bind() 是无效的。更深层次的原因， bind() 的实现，相当于使用函数在内部包了一个 call / apply ，第二次 bind() 相当于再包住第一次 bind() ,故第二次以后的 bind 是无法生效的。</p>
<p>   apply、call、bind比较</p>
<p>那么 apply、call、bind 三者相比较，之间又有什么异同呢？何时使用 apply、call，何时使用 bind 呢。简单的一个栗子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">x</span>: <span class="number">81</span>,</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> foo = &#123;</div><div class="line">    <span class="attr">getX</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="built_in">console</span>.log(foo.getX.bind(obj)());  <span class="comment">//81</span></div><div class="line"><span class="built_in">console</span>.log(foo.getX.call(obj));    <span class="comment">//81</span></div><div class="line"><span class="built_in">console</span>.log(foo.getX.apply(obj));   <span class="comment">//81</span></div></pre></td></tr></table></figure>
<p>三个输出的都是81，但是注意看使用 bind() 方法的，他后面多了对括号。</p>
<p>也就是说，区别是，当你希望改变上下文环境之后并非立即执行，而是回调执行的时候，使用 bind() 方法。而 apply/call 则会立即执行函数。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>apply 、 call 、bind 三者都是用来改变函数的this对象的指向的；</li>
<li>apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文；</li>
<li>apply 、 call 、bind 三者都可以利用后续参数传参；</li>
<li>bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> apply </tag>
            
            <tag> bind </tag>
            
            <tag> call </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用 github 搭建静态网站]]></title>
      <url>/2016/04/08/static-website/</url>
      <content type="html"><![CDATA[<hr>
<p>一直用 github 写博客文章，着实少了点乐趣，其实我们也可以利用 github 部署网站，话不多说，整理笔记如下:</p>
<h2 id="初学者-链接：https-pan-baidu-com-s-1cevTGa-密码：c332"><a href="#初学者-链接：https-pan-baidu-com-s-1cevTGa-密码：c332" class="headerlink" title="初学者 链接：https://pan.baidu.com/s/1cevTGa 密码：c332"></a>初学者 链接：<a href="https://pan.baidu.com/s/1cevTGa" target="_blank" rel="external">https://pan.baidu.com/s/1cevTGa</a> 密码：c332</h2><a id="more"></a>
<blockquote>
<h2 id="1-登录个人界面"><a href="#1-登录个人界面" class="headerlink" title="1. 登录个人界面"></a>1. 登录个人界面</h2></blockquote>
<p>注册 GitHub 账号，完善用户信息后，进入个人界面。</p>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/github-images/%E4%B8%AA%E4%BA%BA%E4%B8%BB%E7%95%8C%E9%9D%A2.png?raw=true" alt="个人主界面" title="个人主界面"></p>
<blockquote>
<h2 id="2-点击-Repositories"><a href="#2-点击-Repositories" class="headerlink" title="2. 点击 Repositories"></a>2. 点击 <strong>Repositories</strong></h2></blockquote>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/github-images/%E7%82%B9%E5%87%BBRepositories.png?raw=true" alt="点击Repositories" title="点击Repositories"></p>
<p>Repositories 在 GitHub 上表示的是仓库，在 GitHub 上每个项目都存放在仓库里，一个仓库保存一个项目.</p>
<blockquote>
<h2 id="3-点击-New-按钮"><a href="#3-点击-New-按钮" class="headerlink" title="3. 点击 New 按钮"></a>3. 点击 New 按钮</h2></blockquote>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/github-images/%E7%82%B9%E5%87%BBNew.png?raw=true" alt="点击New" title="点击New"></p>
<blockquote>
<h2 id="4-创建仓库"><a href="#4-创建仓库" class="headerlink" title="4. 创建仓库"></a>4. 创建仓库</h2></blockquote>
<p>根据图中的提示填写信息，信息填写完成后单击 Create respository 按钮创建仓库。</p>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/github-images/%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93.png?raw=true" alt="Create respository" title="Create respository"></p>
<blockquote>
<h2 id="5-点击-Settings"><a href="#5-点击-Settings" class="headerlink" title="5. 点击 Settings"></a>5. 点击 Settings</h2></blockquote>
<p>创建好仓库后,会自动跳转到下图所示的界面，在界面中单击Settings.</p>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/github-images/%E7%82%B9%E5%87%BB%20Settings.png?raw=true" alt="点击 Settings" title="点击 Settings"></p>
<blockquote>
<h2 id="6-创建网站主题"><a href="#6-创建网站主题" class="headerlink" title="6. 创建网站主题"></a>6. 创建网站主题</h2></blockquote>
<p>进入设置界面后一直往下，找到 <strong>GitHub Page</strong> ,并且单击GitHub Page模块中的 <strong>Choose a theme</strong> 按钮创建一个网站的主题。</p>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/github-images/%E9%80%89%E6%8B%A9%E4%B8%BB%E9%A2%98.png?raw=true" alt="Choose a theme" title="Choose a theme"></p>
<blockquote>
<h2 id="7-选择-Cayman-主题-然后点击-select-theme-按钮"><a href="#7-选择-Cayman-主题-然后点击-select-theme-按钮" class="headerlink" title="7. 选择 Cayman 主题,然后点击 select theme 按钮"></a>7. 选择 Cayman 主题,然后点击 select theme 按钮</h2></blockquote>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/github-images/Cayman%20theme.png?raw=true" alt="Cayman theme" title="Cayman theme"></p>
<blockquote>
<h2 id="8-点击-Commit-changes-按钮"><a href="#8-点击-Commit-changes-按钮" class="headerlink" title="8. 点击 Commit changes 按钮"></a>8. 点击 Commit changes 按钮</h2></blockquote>
<p>选择主题后，自动跳转页面，页面往下拉，找到 Commit changes,点击按钮。</p>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/github-images/commit-changes.png?raw=true" alt="Commit changes" title="Commit changes"></p>
<blockquote>
<h2 id="9-点击-Settings-按钮"><a href="#9-点击-Settings-按钮" class="headerlink" title="9. 点击 Settings 按钮"></a>9. 点击 Settings 按钮</h2></blockquote>
<p>单击Commit changes按钮后会自动跳转到我们创建的仓库界面，里面包含了仓库的各种信息，其中master表示这个仓库位于master分之上，进入界面后单击Settings按钮。</p>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/github-images/Settings.png?raw=true" alt="Settings" title="Settings"></p>
<blockquote>
<h2 id="10-在Settings界面中往下滑，滑到GitHub-Page模块，可以看到GitHub-Page模块中多了一个网址"><a href="#10-在Settings界面中往下滑，滑到GitHub-Page模块，可以看到GitHub-Page模块中多了一个网址" class="headerlink" title="10. 在Settings界面中往下滑，滑到GitHub Page模块，可以看到GitHub Page模块中多了一个网址"></a>10. 在Settings界面中往下滑，滑到GitHub Page模块，可以看到GitHub Page模块中多了一个网址</h2></blockquote>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/github-images/GithubPagesWebUrl.png?raw=true" alt="网址" title="网址"></p>
<blockquote>
<h2 id="11-打开网址，查看效果"><a href="#11-打开网址，查看效果" class="headerlink" title="11. 打开网址，查看效果"></a>11. 打开网址，查看效果</h2></blockquote>
<p>在浏览器中打开网址后，可以看到网页上呈现出的内容就是我们刚刚创建的主题为Cayman的网页。</p>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/github-images/%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA.png?raw=true" alt="效果展示" title="效果展示"></p>
<blockquote>
<h2 id="12-回到仓库界面"><a href="#12-回到仓库界面" class="headerlink" title="12. 回到仓库界面"></a>12. 回到仓库界面</h2></blockquote>
<p>回到GitHub上,并且打开我们刚刚创建的那个仓库，仓库里的文件就是刚刚在浏览器中显示的内容，接下来要做的事情就是修改仓库里的文件，单击<strong>Clone or download</strong>按钮。</p>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/github-images/CloneAndDownload.png?raw=true" alt="Clone or download" title="Clone or download"></p>
<blockquote>
<h2 id="13-单击复制到剪切板按钮，复制仓库的url"><a href="#13-单击复制到剪切板按钮，复制仓库的url" class="headerlink" title="13. 单击复制到剪切板按钮，复制仓库的url"></a>13. 单击复制到剪切板按钮，复制仓库的url</h2></blockquote>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/github-images/CloneAndDownloadUrl.png?raw=true" alt="Clone or download" title="Clone or download"></p>
<blockquote>
<h2 id="14-创建一个文件夹"><a href="#14-创建一个文件夹" class="headerlink" title="14. 创建一个文件夹"></a>14. 创建一个文件夹</h2></blockquote>
<p>在电脑中创建一个文件夹(比如E盘，自己决定)，用于保存从Github中克隆下来的仓库，我建的文件夹叫做Blog-love-static-website(好长，哈哈哈)，进入此文件夹下。shift + 鼠标右键 打开命令窗口。</p>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/github-images/1.png?raw=true" alt="1" title="1"></p>
<blockquote>
<h2 id="15-克隆项目"><a href="#15-克隆项目" class="headerlink" title="15. 克隆项目"></a>15. 克隆项目</h2></blockquote>
<p>在命令行中执行<code>git clone https://github.com/HudadaHexiaolili/love-static-website.git</code>命令</p>
<p>其中git clone 表示要克隆一个项目，后面的<a href="https://github.com/HudadaHexiaolili/love-static-website.git" target="_blank" rel="external">https://github.com/HudadaHexiaolili/love-static-website.git</a><br>表示项目地址，该地址是由第13步操作获得的，当在最后一行出现了100%表示，远程仓库已经成功的克隆到了本地</p>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/github-images/2.png?raw=true" alt="2" title="2"></p>
<blockquote>
<h2 id="16-查看文件"><a href="#16-查看文件" class="headerlink" title="16. 查看文件"></a>16. 查看文件</h2></blockquote>
<p>打开创建的文件，发现多了个 love-static-website 文件，该文件是刚刚在 GitHub 中创建的仓库</p>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/github-images/3.png?raw=true" alt="3" title="3"></p>
<blockquote>
<h2 id="17-打开文件，并且将需要上传到GitHub上的网站添加到该文件中"><a href="#17-打开文件，并且将需要上传到GitHub上的网站添加到该文件中" class="headerlink" title="17. 打开文件，并且将需要上传到GitHub上的网站添加到该文件中"></a>17. 打开文件，并且将需要上传到GitHub上的网站添加到该文件中</h2></blockquote>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/github-images/4.png?raw=true" alt="4" title="4"></p>
<p><strong>注意</strong> <font color="red">你的首页文件名必须为 index.html</font></p>
<blockquote>
<h2 id="18-执行下面命令"><a href="#18-执行下面命令" class="headerlink" title="18. 执行下面命令"></a>18. 执行下面命令</h2></blockquote>
<ol>
<li>打开命令行，并且进入love-static-website文件夹下<br><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/github-images/5.png?raw=true" alt="5" title="5"></li>
<li><code>git add -A</code>  //将文件添加到缓存区<br><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/github-images/6.png?raw=true" alt="6" title="6"></li>
<li><code>git commit -m &quot;first commit.&quot;</code>  //将文件提交到git中<br><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/github-images/7.png?raw=true" alt="7" title="7"></li>
<li><code>git push origin master</code> //将文件push到GitHub上的master分支上<br><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/github-images/8.png?raw=true" alt="8" title="8"></li>
</ol>
<p>当出现上图所示的提示信息时，表示网站已经成功的提交到了GitHub上</p>
<blockquote>
<h2 id="19-回到Github上的boyaa仓库，可以看到文件已经全部提交上来了"><a href="#19-回到Github上的boyaa仓库，可以看到文件已经全部提交上来了" class="headerlink" title="19. 回到Github上的boyaa仓库，可以看到文件已经全部提交上来了"></a>19. 回到Github上的boyaa仓库，可以看到文件已经全部提交上来了</h2></blockquote>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/github-images/9.png?raw=true" alt="9" title="9"></p>
<blockquote>
<p>查看效果</p>
</blockquote>
<p>激动人心的一刻来了，再次打开位于Settings下，GitHub Page模块中的网址，可以看到网页变成了我们修改后的页面<br>网站的网站：<a href="https://hudadahexiaolili.github.io/love-static-website/">https://hudadahexiaolili.github.io/love-static-website/</a><br>通过观察网址可知，网址的格式为 https:// + GitHub的用户名 + .github.io/ + 仓库的名称</p>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/github-images/10.png?raw=true" alt="give you a hua" title="give you a hua"></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>方法很简单，还可以利用这种方法<strong><a href="https://segmentfault.com/a/1190000006820290" title="在github上创建自己的简历" target="_blank" rel="external">在github上创建自己的简历</a></strong>，性价比很高。</p>
<p><a href="https://www.zhihu.com/question/20632491" title="怎么写简历中的自我评价？" target="_blank" rel="external">怎么写简历中的自我评价？</a><br><a href="https://www.zhihu.com/question/19766230" title="如何做一份优秀的简历？" target="_blank" rel="external">如何做一份优秀的简历？</a></p>
<p>当然也可以通过<strong><a href="https://qdan.me/list/VUR-PAX01x8Skk0F" title="轻单" target="_blank" rel="external">在线简历制作</a></strong>制作自己的简历，不过不如自己写的开心好像。</p>
]]></content>
      
        <categories>
            
            <category> GitHub学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> 静态网站 </tag>
            
            <tag> 程序员表白 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用canvas绘制饼形图]]></title>
      <url>/2016/04/02/canvas%E7%BB%98%E5%88%B6%E9%A5%BC%E5%BD%A2%E5%9B%BE/</url>
      <content type="html"><![CDATA[<h2 id="绘制任意数据的简单饼形图"><a href="#绘制任意数据的简单饼形图" class="headerlink" title="绘制任意数据的简单饼形图"></a>绘制任意数据的简单饼形图</h2><p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/images/%E6%89%87%E5%BD%A2%E5%9B%BE.jpg?raw=true" alt="最终效果图" title="最终效果图"></p>
<a id="more"></a>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ===&gt; 步骤 1 </span></div><div class="line"><span class="comment">// 创建canvas标签，该标签用来展示图像</span></div><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</div><div class="line"><span class="comment">//canvas的宽高不要使用 CSS 来设置，会有拉伸问题，应该直接使用属性设置</span></div><div class="line">canvas.width = <span class="number">600</span>;</div><div class="line">canvas.height = <span class="number">400</span>;</div><div class="line">canvas.style.border = <span class="string">'1px dashed red'</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(canvas);</div><div class="line"><span class="comment">//获得绘图工具, 该工具是 CanvasRenderingContext2D 类型的对象.</span></div><div class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">'2d'</span>);</div></pre></td></tr></table></figure>
<h3 id="生成随机函数"><a href="#生成随机函数" class="headerlink" title="生成随机函数"></a>生成随机函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ===&gt; 步骤 2  </span></div><div class="line"><span class="comment">//随机函数</span></div><div class="line"><span class="keyword">var</span> random = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//传入参数为两个，表示生成的数的个数在 min 和 max 之间取值</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">randomWithTwoParam</span>(<span class="params"> min , max </span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.floor( ( max - min ) * <span class="built_in">Math</span>.random() ) + min;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 传入的参数为 1 个,表示生成的数的个数在 0 -max 之间取值</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">randomWithOneParam</span>(<span class="params"> max </span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> randomWithTwoParam( <span class="number">0</span>, max );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params"> min , max </span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> ( min === <span class="literal">undefined</span> ) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">Math</span>.random();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( max === <span class="literal">undefined</span> ) &#123;</div><div class="line">            <span class="keyword">return</span> randomWithOneParam( min );</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> randomWithTwoParam( min , max );</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> random;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">//颜色</span></div><div class="line"><span class="keyword">var</span> colors = <span class="string">'blueviolet,dodgerblue,orangered,limegreen,yellow,aqua,deeppink'</span>.split( <span class="string">','</span> );</div><div class="line"><span class="comment">//colors.length = 7;</span></div><div class="line"><span class="comment">//随机生成5-7个数</span></div><div class="line"><span class="keyword">var</span> count = random ( <span class="number">5</span>, colors.length);</div><div class="line"><span class="comment">//生成数字数组</span></div><div class="line"><span class="keyword">var</span> numbers = [];</div><div class="line"><span class="keyword">while</span> ( numbers.length &lt;= count ) &#123;</div><div class="line">    numbers.push( random (<span class="number">100</span>) );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="求生成的随机角度"><a href="#求生成的随机角度" class="headerlink" title="求生成的随机角度"></a>求生成的随机角度</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ===&gt; 步骤 3</span></div><div class="line"><span class="comment">//求生成数字的总和</span></div><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numbers.length; i++ ) &#123;</div><div class="line">    sum += numbers[ i ];</div><div class="line">&#125;</div><div class="line"><span class="comment">//分析:</span></div><div class="line"><span class="comment">//生成的随机角数字 / 所对应的饼状图角度 = 生成数的总和 / (2*Math.PI)</span></div><div class="line"><span class="keyword">var</span> numObjs = numbers.map( <span class="function"><span class="params">v</span> =&gt;</span> (&#123;</div><div class="line">    <span class="attr">value</span>: v,</div><div class="line">    <span class="attr">angle</span>: v * <span class="number">2</span> * (<span class="built_in">Math</span>.PI) / sum</div><div class="line">&#125;));</div></pre></td></tr></table></figure>
<h3 id="绘制饼状图"><a href="#绘制饼状图" class="headerlink" title="绘制饼状图"></a>绘制饼状图</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//===&gt; 步骤 4</span></div><div class="line"><span class="comment">//循环绘制饼状图</span></div><div class="line"><span class="keyword">var</span> startAngel = -(<span class="built_in">Math</span>.PI/<span class="number">2</span>);</div><div class="line">numObjs.forEach( <span class="function"><span class="keyword">function</span> (<span class="params"> v , i </span>) </span>&#123;</div><div class="line">    context.beginPath();</div><div class="line">    context.fillStyle = colors[ i ];</div><div class="line">    context.moveTo( <span class="number">300</span>, <span class="number">200</span> );</div><div class="line">    context.arc( <span class="number">300</span>, <span class="number">200</span>, <span class="number">100</span>, startAngel, startAngel += v.angle );</div><div class="line">    context.fill();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="整合代码"><a href="#整合代码" class="headerlink" title="整合代码"></a>整合代码</h3><p><code>代码整合: 将上述代码依次整合在一个script标签中,代码结束.</code></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><pre><code>饼状图只实现了大体功能,并未将数据添加到饼状图上，细节工作有待完善。
</code></pre>]]></content>
      
        <categories>
            
            <category> canvas系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 饼形图 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用canvas绘制 折线图]]></title>
      <url>/2016/04/01/canvas%E7%BB%98%E5%88%B6%E6%8A%98%E7%BA%BF%E5%9B%BE/</url>
      <content type="html"><![CDATA[<pre><code>随机生成将数据，并将其以折线图的方式显示出来
</code></pre><h2 id="绘制坐标系"><a href="#绘制坐标系" class="headerlink" title="绘制坐标系"></a>绘制坐标系</h2><p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/images/%E6%9C%80%E7%BB%88%E6%95%88%E6%9E%9C%E5%9B%BE.png?raw=true" alt="最终效果图" title="最终效果图"><br><a id="more"></a></p>
<h3 id="基本绘制"><a href="#基本绘制" class="headerlink" title="基本绘制:"></a>基本绘制:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//具体实现代码</span></div><div class="line">    <span class="comment">// ===&gt; 步骤 1. </span></div><div class="line">    <span class="comment">// 创建canvas标签，该标签用来展示图像</span></div><div class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</div><div class="line">    <span class="comment">//canvas的宽高不要使用 CSS 来设置，会有拉伸问题，应该直接使用属性设置</span></div><div class="line">    canvas.width = <span class="number">600</span>;</div><div class="line">    canvas.height = <span class="number">400</span>;</div><div class="line">    canvas.style.border = <span class="string">'1px dashed red'</span>;</div><div class="line">    <span class="built_in">document</span>.body.appendChild(canvas);</div><div class="line">    <span class="comment">//获得绘图工具, 该工具是 CanvasRenderingContext2D 类型的对象.</span></div><div class="line">    <span class="keyword">var</span> context = canvas.getContext(<span class="string">'2d'</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 不要硬编码</span></div><div class="line">    <span class="comment">// 考虑是应该有什么参量?</span></div><div class="line">  </div><div class="line">    <span class="comment">// 常规意义上是给 上下左右边距</span></div><div class="line">    <span class="keyword">var</span> paddingleft = <span class="number">50</span>, paddingright = <span class="number">50</span>, paddingtop = <span class="number">50</span>, paddingbottom = <span class="number">50</span>;</div><div class="line">    <span class="comment">//箭头的宽度、高度</span></div><div class="line">    <span class="keyword">var</span> arrowWidth = <span class="number">10</span>, arrowHeight = <span class="number">20</span>;</div><div class="line"></div><div class="line">    <span class="comment">//原点坐标</span></div><div class="line">    <span class="keyword">var</span> ox = paddingleft,</div><div class="line">        oy = canvas.height - paddingbottom;</div><div class="line"></div><div class="line">    <span class="comment">// 绘制坐标轴</span></div><div class="line">        <span class="comment">//设置开始绘图的位置为 Y轴顶点处</span></div><div class="line">        <span class="comment">//开始沿Y轴负方向、原点、X轴正方向依次绘制直线</span></div><div class="line">    context.moveTo( ox, paddingtop );</div><div class="line">    context.lineTo( ox, oy );</div><div class="line">    context.lineTo( canvas.width - paddingright, oy );</div><div class="line">    context.stroke();<span class="comment">//描边绘制</span></div><div class="line"></div><div class="line">    <span class="comment">// 绘制箭头</span></div><div class="line">        <span class="comment">//开启新的绘制</span></div><div class="line">    context.beginPath();</div><div class="line">        <span class="comment">//绘制Y轴箭头</span></div><div class="line">    context.moveTo( ox - arrowWidth / <span class="number">2</span>, paddingtop + arrowHeight );</div><div class="line">    context.lineTo( ox, paddingtop );</div><div class="line">    context.lineTo( ox + arrowWidth / <span class="number">2</span>, paddingtop + arrowHeight );</div><div class="line">    context.lineTo( ox, paddingtop + arrowHeight * <span class="number">2</span> / <span class="number">3</span> );</div><div class="line">        <span class="comment">//填充绘制</span></div><div class="line">    context.fill();</div><div class="line"></div><div class="line">        <span class="comment">//开启新的绘制</span></div><div class="line">    context.beginPath();</div><div class="line">        <span class="comment">//绘制X轴箭头</span></div><div class="line">    context.moveTo( canvas.width - paddingright - arrowHeight, oy - arrowWidth / <span class="number">2</span> );</div><div class="line">    context.lineTo( canvas.width - paddingright, oy );</div><div class="line">    context.lineTo( canvas.width - paddingright - arrowHeight, oy + arrowWidth / <span class="number">2</span> );</div><div class="line">    context.lineTo( canvas.width - paddingright - arrowHeight * <span class="number">2</span> / <span class="number">3</span>, oy );</div><div class="line">        <span class="comment">//填充绘制</span></div><div class="line">    context.fill();</div></pre></td></tr></table></figure>
<h3 id="效果示意图"><a href="#效果示意图" class="headerlink" title="效果示意图"></a>效果示意图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt; code &lt;/script&gt;</div><div class="line">将上述代码替换 code .在将&lt;script&gt;加入到&lt;body&gt;后.浏览器效果如下图:</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/HudadaHexiaolili/Blogphotos/55e6785ad09c2dce5d62be382babcd4591983da3/images/%E5%9F%BA%E6%9C%AC%E5%9D%90%E6%A0%87%E7%B3%BB.png" alt="坐标系基本绘制" title="坐标系基本绘制"></p>
<h2 id="绘制坐标系上的单点-理解过渡-可忽略"><a href="#绘制坐标系上的单点-理解过渡-可忽略" class="headerlink" title="绘制坐标系上的单点( 理解过渡 可忽略)"></a>绘制坐标系上的单点( 理解过渡 可忽略)</h2><p><code>绘制完坐标系，尝试在其基础上绘制单点</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//举个例子，绘制点(100,100)</span></div><div class="line"></div><div class="line"><span class="comment">// 步骤：</span></div><div class="line"><span class="comment">// 1.先计算 对应的坐标 在 坐标系 中的实际坐标</span></div><div class="line"><span class="comment">// 2.拿到原点坐标</span></div><div class="line"><span class="keyword">var</span> ox = paddingleft,</div><div class="line">      oy = canvas.height - paddingbottom;</div><div class="line"><span class="comment">// 3.实际坐标</span></div><div class="line"><span class="keyword">var</span> x = ox + <span class="number">100</span>,</div><div class="line">      y = oy - <span class="number">100</span>;</div><div class="line"><span class="comment">// 4.绘制点</span></div><div class="line"><span class="comment">// 注意: 绘制的时候起始点从坐标点向上,向左移动 2 个像素</span></div><div class="line">  context.beginPath();</div><div class="line">  context.moveTo( x - <span class="number">2</span>, y - <span class="number">2</span> );</div><div class="line">  context.lineTo( x + <span class="number">2</span>, y - <span class="number">2</span> );</div><div class="line">  context.lineTo( x + <span class="number">2</span>, y + <span class="number">2</span> );</div><div class="line">  context.lineTo( x - <span class="number">2</span>, y + <span class="number">2</span> );</div><div class="line">  context.closePath();</div><div class="line">  <span class="comment">//秒变颜色</span></div><div class="line">  context.strokeStyle = <span class="string">'blue'</span>;</div><div class="line">  <span class="comment">//描边绘制</span></div><div class="line">  context.stroke();</div></pre></td></tr></table></figure></p>
<h3 id="单点绘制效果图"><a href="#单点绘制效果图" class="headerlink" title="单点绘制效果图:"></a>单点绘制效果图:</h3><p><img src="https://raw.githubusercontent.com/HudadaHexiaolili/Blogphotos/55e6785ad09c2dce5d62be382babcd4591983da3/images/%E5%8D%95%E7%82%B9%E7%BB%98%E5%88%B6.png" alt="坐标系单点绘制" title="坐标系单点绘制"></p>
<h2 id="多点绘制-数字随机生成"><a href="#多点绘制-数字随机生成" class="headerlink" title="多点绘制(数字随机生成)"></a>多点绘制(<strong>数字随机生成</strong>)</h2><h3 id="随机生成函数"><a href="#随机生成函数" class="headerlink" title="随机生成函数"></a>随机生成函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ===&gt; 步骤 2. 准备随机函数</span></div><div class="line"><span class="keyword">var</span> random =( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//传入参数为两个，表示生成的数的个数在 min 和 max 之间取值</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">randomWithTwoParam</span>(<span class="params"> min , max </span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.floor( ( max - min ) * <span class="built_in">Math</span>.random() ) + min;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 传入的参数为 1 个,表示生成的数的个数在 0 -max 之间取值</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">randomWithOneParam</span>(<span class="params"> max </span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> randomWithTwoParam( <span class="number">0</span>, max );</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">random</span> (<span class="params"> min, max </span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> ( min === <span class="literal">undefined</span> ) &#123;<span class="comment">//没有传参</span></div><div class="line">            <span class="keyword">return</span> <span class="built_in">Math</span>.random();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( max === <span class="literal">undefined</span> ) &#123;<span class="comment">//只传了min</span></div><div class="line">            <span class="keyword">return</span> randomWithOneParam( min );</div><div class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//传了min 和 max 俩参数</span></div><div class="line">            <span class="keyword">return</span> randomWithTwoParam( min, max );</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> random;</div><div class="line">&#125;)();</div><div class="line"><span class="comment">//随机生成几个点(范围在传入的值之间，这里传入了 5 和 20,表示个数在5-20之间)</span></div><div class="line"><span class="keyword">var</span> count = random( <span class="number">5</span>, <span class="number">20</span> );</div><div class="line"><span class="keyword">var</span> points = [];</div><div class="line"><span class="keyword">var</span> x;</div><div class="line"><span class="keyword">while</span> ( points.length &lt; count ) &#123;</div><div class="line">    <span class="comment">//注意 x 不允许重复</span></div><div class="line">    x = random( <span class="number">1000</span> );<span class="comment">//生成一个0-1000的随机数X</span></div><div class="line">    <span class="keyword">if</span>( points.every( <span class="function"><span class="params">pt</span> =&gt;</span> pt.x != x) ) &#123;</div><div class="line">        <span class="comment">//没有这个 x</span></div><div class="line">        points.push(&#123;</div><div class="line">            <span class="attr">x</span>: x,</div><div class="line">            <span class="attr">y</span>: random( <span class="number">1000</span> )<span class="comment">//生成一个0-1000的随机数Y</span></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>console.table( points ); 便会得到下面的图:</code></p>
<p><img src="https://raw.githubusercontent.com/HudadaHexiaolili/Blogphotos/55e6785ad09c2dce5d62be382babcd4591983da3/images/%E5%A4%9A%E9%9A%8F%E6%9C%BA%E7%82%B9%E7%BB%98%E5%88%B6.png" alt="多点随机绘制" title="多点随机绘制"></p>
<h3 id="计算最值求比例"><a href="#计算最值求比例" class="headerlink" title="计算最值求比例"></a>计算最值求比例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ===&gt; 步骤 3.求 X 和 Y 的最大值</span></div><div class="line"><span class="keyword">var</span> maxX = <span class="built_in">Math</span>.max.apply( <span class="literal">null</span>, points.map( <span class="function"><span class="params">pt</span> =&gt;</span> pt.x ) ),</div><div class="line">    maxY = <span class="built_in">Math</span>.max.apply( <span class="literal">null</span>, points.map( <span class="function"><span class="params">pt</span> =&gt;</span> pt.y ) );</div><div class="line"></div><div class="line"><span class="comment">// 对数组按照 x 的大小排序</span></div><div class="line">points.sort( <span class="function">(<span class="params"> a, b </span>) =&gt;</span> a.x - b.x );</div><div class="line"></div><div class="line"><span class="comment">// 计算比例</span></div><div class="line"><span class="comment">// 思考: 我们的目的是什么?</span></div><div class="line"><span class="comment">// 我们的目的是计算在画布中的绘制坐标</span></div><div class="line"><span class="comment">// 绘制坐标 : 随机坐标 == 坐标系的宽高 : 最大的xy</span></div><div class="line"><span class="comment">// 比例 ( rate ) = 坐标系的宽高 / 最大值</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> rateX = ( canvas.width - paddingLeft - paddingRight ) / maxX,</div><div class="line">    rateY = ( canvas.height - paddingTop - paddingBottom ) / maxY;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.table( points );</div><div class="line"><span class="built_in">console</span>.log( <span class="string">'maxX = '</span>  + maxX + <span class="string">', maxY = '</span> + maxY );</div><div class="line"><span class="comment">//在控制台输出得到下面的图</span></div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/HudadaHexiaolili/Blogphotos/55e6785ad09c2dce5d62be382babcd4591983da3/images/%E8%AE%A1%E7%AE%97%E6%9C%80%E5%80%BC%E6%B1%82%E6%AF%94%E4%BE%8B.png" alt="计算比例求最值" title="计算比例求最值"></p>
<h3 id="计算绘制坐标"><a href="#计算绘制坐标" class="headerlink" title="计算绘制坐标"></a>计算绘制坐标</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ===&gt; 步骤 4.计算要绘制的坐标</span></div><div class="line"><span class="keyword">var</span> newpoints = points.map( <span class="function"><span class="params">pt</span> =&gt;</span> (&#123;</div><div class="line">    <span class="attr">x</span>: pt.x,</div><div class="line">    <span class="attr">y</span>: pt.y,</div><div class="line">    <span class="attr">drawX</span>: pt.x * rateX,</div><div class="line">    <span class="attr">drawY</span>: pt.y * rateY </div><div class="line">  &#125;) );</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.table( newpoints );</div><div class="line"><span class="comment">//输出得到下图所示：</span></div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/HudadaHexiaolili/Blogphotos/55e6785ad09c2dce5d62be382babcd4591983da3/images/%E8%AE%A1%E7%AE%97%E7%BB%98%E5%88%B6%E5%9D%90%E6%A0%87.png" alt="计算绘制坐标" title="计算绘制坐标"></p>
<h3 id="连线绘制点"><a href="#连线绘制点" class="headerlink" title="连线绘制点"></a>连线绘制点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ===&gt; 步骤 5.连线绘制点</span></div><div class="line">context.beginPath();</div><div class="line">context.fillStyle = <span class="string">'red'</span>;</div><div class="line"></div><div class="line">newpoints.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">newpt</span>) </span>&#123;</div><div class="line">    <span class="comment">//让 随机点 在坐标范围内显示</span></div><div class="line">    <span class="keyword">var</span> x = ox + newpt.drawX,</div><div class="line">        y = oy - newpt.drawY;</div><div class="line">    <span class="comment">//生成多个 随机点</span></div><div class="line">    context.moveTo(x - ptWidth / <span class="number">2</span>, y - ptWidth / <span class="number">2</span>);</div><div class="line">    context.lineTo(x + ptWidth / <span class="number">2</span>, y - ptWidth / <span class="number">2</span>);</div><div class="line">    context.lineTo(x + ptWidth / <span class="number">2</span>, y + ptWidth / <span class="number">2</span>);</div><div class="line">    context.lineTo(x - ptWidth / <span class="number">2</span>, y + ptWidth / <span class="number">2</span>);</div><div class="line">    context.closePath();</div><div class="line">&#125;);</div><div class="line"><span class="comment">//填充绘制</span></div><div class="line">context.fill();</div><div class="line"></div><div class="line"><span class="comment">// 连线</span></div><div class="line">context.beginPath();</div><div class="line">context.strokeStyle = <span class="string">'red'</span>;</div><div class="line"><span class="comment">//让折线拐角处不出现尖角</span></div><div class="line">context.lineJoin = <span class="string">'round'</span>;</div><div class="line">context.lineWidth = <span class="number">1</span>;</div><div class="line"></div><div class="line">newpoints.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">newpt</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> x = ox + newpt.drawX,</div><div class="line">        y = oy - newpt.drawY;</div><div class="line">    context.lineTo(x, y);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//描边连线</span></div><div class="line">context.stroke();</div></pre></td></tr></table></figure>
<h3 id="最终效果图"><a href="#最终效果图" class="headerlink" title="最终效果图"></a>最终效果图</h3><p><code>代码整合: 将上述代码依次整合在一个script标签中,代码结束.</code></p>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/images/%E6%9C%80%E7%BB%88%E6%95%88%E6%9E%9C%E5%9B%BE.png?raw=true" alt="最终效果图" title="最终效果图"></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">简单完成了，随机数生成折线图的功能，可样式不够美观，没有在折线处添加数据，还有很多不足的地方，以后会完善。</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> canvas系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 折线图 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue中的AJAX请求]]></title>
      <url>/2016/03/21/vue%E7%9A%84ajax/</url>
      <content type="html"><![CDATA[<p> Vue中的AJAX请求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Vue可以借助于vue-resource来实现AJAX请求</div></pre></td></tr></table></figure>
<ul>
<li>http请求报文</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">浏览器与服务器数据交互是遵循http协议的，当浏览器要访问服务器的时候，浏览器需要将相关请求数据提交给服务器（例如：浏览器信息，url地址，参数等），通常是通过请求报文来提交的</div><div class="line"></div><div class="line">请求报文的格式分为：</div><div class="line">    1、请求报文行</div><div class="line">    2、请求报文头</div><div class="line">    3、请求报文体</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>http响应报文</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">当浏览器请求服务器的时候，服务器需要将数据返回给浏览器，这种数据是通过响应报文响应回浏览器的</div><div class="line"></div><div class="line"> 响应报文的格式分为：</div><div class="line">    1、响应报文行</div><div class="line">    2、响应报文头</div><div class="line">    3、响应报文体</div></pre></td></tr></table></figure>
<ul>
<li>请求报文和响应报文配图</li>
</ul>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/vue/d2-4.png?raw=true" alt="d2-4.png"></p>
<h3 id="3-1-vue-resource"><a href="#3-1-vue-resource" class="headerlink" title="3.1 vue-resource"></a>3.1 vue-resource</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Vue与后台Api进行交互通常是利用vue-resource来实现的，本质上vue-resource是通过http来完成AJAX请求响应的</div></pre></td></tr></table></figure>
<ul>
<li>vue-resource GitHub 地址：<a href="https://github.com/pagekit/vue-resource" target="_blank" rel="external">https://github.com/pagekit/vue-resource</a></li>
<li><p>vue-resource Http请求api参考（主要看这个）：<a href="https://github.com/pagekit/vue-resource/blob/master/docs/http.md" target="_blank" rel="external">https://github.com/pagekit/vue-resource/blob/master/docs/http.md</a></p>
</li>
<li><p>vue结合vue-resource写法步骤</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">1、通过 https://cdn.jsdelivr.net/vue.resource/1.2.1/vue-resource.min.js 下载到vue-resource文件</div><div class="line"></div><div class="line">2、在html页面中通过script标签导入vue-resource.min.js 文件后，就会自动的在Vue对象实例上初始化 $http</div><div class="line"></div><div class="line">3、使用</div><div class="line">// 全局Vue对象写法</div><div class="line">    Vue.http.get(&apos;/someUrl&apos;, [options]).then(successCallback, errorCallback);</div><div class="line">    Vue.http.post(&apos;/someUrl&apos;, [body], [options]).then(successCallback, errorCallback);</div><div class="line"></div><div class="line">// 在Vue对象中的写法</div><div class="line">    this.$http.get(&apos;/someUrl&apos;, [options]).then(successCallback, errorCallback);</div><div class="line">    this.$http.post(&apos;/someUrl&apos;, [body], [options]).then(successCallback, errorCallback);</div></pre></td></tr></table></figure>
<ul>
<li>vue-resource get请求</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">写法格式：</div><div class="line"> this.$http.get(&apos;请求的url&apos;, [可选参数对象，使用&#123;&#125;传参]).then(成功回调函数, 失败回调函数);</div><div class="line"> </div><div class="line">成功回调函数参数对象主要属性说明：</div><div class="line">1、url ： 请求的原始url</div><div class="line">2、body： 响应报文体中的数据（我们通常用这个属性获取服务器返回的数据）</div><div class="line">3、其他属性请看文档</div><div class="line"></div><div class="line">举例：</div><div class="line"> this.$http.get(&apos;http://vuecms.ittun.com/api/getlunbo?id=1&apos;).then(function(res)&#123;console.log(res.body)&#125;, function(err)&#123;//err是异常数据&#125;);</div></pre></td></tr></table></figure>
<p><code>实例</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">'#app'</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'getData'</span>&gt;</span> get请求 <span class="tag">&lt;<span class="name">button</span>&gt;</span></span></div><div class="line">    &#123;&#123; msg | json &#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="comment">//创建根实例</span></div><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="comment">//挂载</span></div><div class="line">    el:<span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>:&#123;</div><div class="line">        <span class="attr">msg</span>:[]</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>:&#123;</div><div class="line">        <span class="attr">getData</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="comment">//发起请求</span></div><div class="line">            <span class="keyword">var</span> url = <span class="string">'http://182.254.146.100:8899/api/getnewslist'</span>;</div><div class="line">            <span class="keyword">this</span>.$http.get(url).then(</div><div class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">                    <span class="keyword">this</span>.msg = response.body.message</div><div class="line">                &#125;</div><div class="line">            )</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li>vue-resource post请求</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">写法格式：</div><div class="line"> this.$http.post(&apos;请求的url&apos;,[可选参数请求报文体对象body,使用&#123;&#125;传参], [可选参数对象，使用&#123;&#125;传参]).then(成功回调函数, 失败回调函数);</div><div class="line"> </div><div class="line">成功回调函数参数对象主要属性说明：</div><div class="line">1、url ： 请求的原始url</div><div class="line">2、body： 响应报文体中的数据（我们通常用这个属性获取服务器返回的数据）</div><div class="line">3、其他属性请看文档</div><div class="line"></div><div class="line">注意点：</div><div class="line">$http.post()方法中的第二个参数固定写成：&#123;emulateJSON:true&#125;,否则可能造成服务器无法接收到请求报文体中的参数值</div><div class="line"></div><div class="line">举例：</div><div class="line"> this.$http.post(&apos;http://vuecms.ittun.com/api/adddata?id=1&apos;  //请求的url</div><div class="line"> ,&#123;content:&apos;hello&apos;&#125;  //请求报文体中传入的参数对象，多个使用逗号分隔</div><div class="line"> ,&#123;emulateJSON:true&#125;  //固定写法，保证服务器可以获取到请求报文体参数值</div><div class="line"> ).then(function(res)&#123;console.log(res.body)&#125;, function(err)&#123;//err是异常数据&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&apos;#app&apos;&gt;</div><div class="line"></div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">    var vm = new Vue(&#123;</div><div class="line">        el:&apos;#app&apos;,</div><div class="line">        methods:&#123;</div><div class="line">            postData:function()&#123;</div><div class="line">                var url = &apos;http://182.254.146.100:8899/api/postcomment/14&apos;;</div><div class="line">                this.$http.post(url,&#123;content:&apos;xxxxxxx&apos;&#125;,&#123;emulateJSON:true&#125;)</div><div class="line">                .then(function(resopnse)&#123;</div><div class="line">                    alert(&apos;success&apos;)</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<ul>
<li>vue-resource jsonp请求</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">jsonp请求主要用来解决ajax跨域请求问题，使用jsonp实现跨域首先要保证服务器api支持jsonp请求的格式</div><div class="line"></div><div class="line"></div><div class="line">写法格式：</div><div class="line"> this.$http.jsonp(&apos;请求的url&apos;, [可选参数对象，使用&#123;&#125;传参]).then(成功回调函数, 失败回调函数);</div><div class="line"> </div><div class="line">成功回调函数参数对象主要属性说明：</div><div class="line">1、url ： 请求的原始url</div><div class="line">2、body： 响应报文体中的数据（我们通常用这个属性获取服务器返回的数据）</div><div class="line">3、其他属性请看文档</div><div class="line"></div><div class="line">举例：</div><div class="line"> this.$http.jsonp(&apos;http://vuecms.ittun.com/api/getlunbo?id=1&apos;).then(function(res)&#123;console.log(res.body)&#125;, function(err)&#123;//err是异常数据&#125;);</div></pre></td></tr></table></figure>
<p><code>实例</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">        <span class="attr">el</span>:<span class="string">'#app'</span>,</div><div class="line">        <span class="attr">data</span>:&#123;</div><div class="line">            <span class="attr">myData</span>:[],</div><div class="line">            <span class="attr">t1</span>:<span class="string">''</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">methods</span>:&#123;</div><div class="line">            <span class="attr">jsonpData</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">this</span>.$http.jsonp(<span class="string">"https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su"</span>, <span class="comment">//跨域请求接口</span></div><div class="line">                    &#123;</div><div class="line">                        <span class="attr">params</span>: &#123;</div><div class="line">                            <span class="attr">wd</span>: <span class="keyword">this</span>.t1,</div><div class="line">                        &#125;,</div><div class="line">                        <span class="attr">jsonp</span>: <span class="string">'cb'</span></div><div class="line">                    &#125;</div><div class="line">                ).then(</div><div class="line">                    <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">                        <span class="keyword">this</span>.myData = <span class="built_in">JSON</span>.parse(res.bodyText).s</div><div class="line">                &#125;)</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Vue.js学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue.js </tag>
            
            <tag> vue-rosource </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue中vetur插件提示 'v-for' directives require 'v-bind:key' directives.错误的解决办法]]></title>
      <url>/2016/03/19/vue%E6%8A%A5%E9%94%99/</url>
      <content type="html"><![CDATA[<p>在用vscode编写vue代码时，因为安装的有vetur插件，所以当代码中有v-for语法时，会提示</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[vue-language-server] <span class="string">'v-for'</span> directives <span class="built_in">require</span> <span class="string">'v-bind:key'</span> directives.</div></pre></td></tr></table></figure>
<p>vue在升级到2.2后，当在组件中使用 v-for 时， key 现在是必须的。</p>
<p>下面是官方文档的说明:</p>
<p><img src="http://images2015.cnblogs.com/blog/934644/201706/934644-20170626160132914-407314765.png" alt="&#39;说明&#39;"></p>
<p>回头看一下，我们写的代码 v-for中有key，但是为什么还报错呢？</p>
<p>一脸蒙蔽~~</p>
<p>去<a href="https://github.com/vuejs/vetur/issues/261" target="_blank" rel="external">vetur插件</a>的github上搜了一下，发现有人提这个报错问题，该插件的作者给出了解决办法：</p>
<p>``This is intended ESLint feature. You can turn off eslint check in future release. </p>
<p>Setting vetur.validation.vue-html to false will disable it.``</p>
<p>意思就是，这是ESLint的功能。对vue进行了eslint检查。</p>
<p>那么我们就把eslint对该插件的检查关闭，</p>
<p>在vscode中，打开 文件&gt;首选项&gt;设置 找到 </p>
<p>vetur.configuration 把  “vetur.validation.template”: true  改成</p>
<p>“vetur.validation.template”: false</p>
<p>保存，我们再看一下vue文件，发现不报错了。</p>
<p><img src="http://images2015.cnblogs.com/blog/934644/201706/934644-20170626160102993-1950038623.jpg" alt="&#39;wf&#39;"></p>
]]></content>
      
        <categories>
            
            <category> Vue.js学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue.js </tag>
            
            <tag> vue-for </tag>
            
            <tag> vetur </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[构造 jQuery 对象]]></title>
      <url>/2016/03/15/%E6%9E%84%E9%80%A0jQuery%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<hr>
<p><strong>jQuery 对象是一个 类数组对象,含有连续的整形属性、length 属性和大量的 jQuery 方法。<br>jQuery 对象由构造函数 jQuery() 创建, $() 则是 jQuery() 的缩写。</strong> </p>
<hr>
<a id="more"></a>
<h2 id="构造函数-jQuery"><a href="#构造函数-jQuery" class="headerlink" title="构造函数 jQuery()"></a>构造函数 jQuery()</h2><p>如果调用构造函数jQuery()时传入的参数不同,创建jQuery对象的逻辑也会随机不同。构造函数 jQuery()有 7 种用法。如下图：</p>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/images/jquery7.png?raw=true" alt="插入图片" title="构造函数 jQuery()的7 种用法"></p>
<h3 id="jQuery-selector-context"><a href="#jQuery-selector-context" class="headerlink" title="jQuery( selector, [,context] )"></a>jQuery( selector, [,context] )</h3><h4 id="第一个参数-selector"><a href="#第一个参数-selector" class="headerlink" title="第一个参数 selector"></a>第一个参数 selector</h4><p>如果传入一个 <code>**字符串参数**</code> ,jQuery 会检查这个字符串是 <code>选择器表达式</code> 还是<code>HTML代码</code>。</p>
<p>如果是 <code>选择器表达式</code>,则会遍历文档,查找与之匹配的 DOM 元素,并创建一个包含了这些 DOM 元素引用的 jQuery 对象;如果没有元素与之匹配,则创建一个空的 jQuery 对象.<br>当然,这个对象不包含任何元素,它的 length 属性为 0. </p>
<p>字符串参数是 <strong>HTML 代码</strong>的情况，在下面将会解释.</p>
<h4 id="第二个参数-context"><a href="#第二个参数-context" class="headerlink" title="第二个参数 context"></a>第二个参数 context</h4><p>默认情况下，对匹配元素的查找将从 根元素 document对象 开始，即查找范围是整个 文档树，不过也可以传入第二个参数 <strong><code>context</code></strong> 来限定查找范围( 我个人习惯把 context 当做” <code>上下文</code> “解读，类似于canvas绘图中的getContext ).</p>
<p>例如,在一个事件监听函数中，可以像下面这样限定查找范围:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'div.foo'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">'span'</span>,<span class="keyword">this</span>).addClass(<span class="string">'bar'</span>);<span class="comment">//限定查找范围</span></div><div class="line">    <span class="comment">// 选择器表达式 "span" 的查找被限定在 this 范围内，也就是只有被点击元素内的span元素才会被添加 类样式 "bar".</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>如果 选择器表达式 selector 是简单的 “#id”,且没有指定 上下文 context，则调用浏览器的原生方法 document.getElementById() 查找属性 id 等于 指定值 的元素;如果是比 “#id” 复杂的选择器表达式或指定了上下文，则通过 jQuery 方法.find()查找，因此 <strong><code>$(&#39;span&#39;,this)等价于 $(this).find(&#39;span&#39;)</code></strong>. </p>
<h3 id="jQuery-html-ownerDocument-、jQuery-html-props"><a href="#jQuery-html-ownerDocument-、jQuery-html-props" class="headerlink" title="jQuery(html,[,ownerDocument])、jQuery(html,props)"></a>jQuery(html,[,ownerDocument])、jQuery(html,props)</h3><h4 id="第一个参数-HTML代码"><a href="#第一个参数-HTML代码" class="headerlink" title="第一个参数 HTML代码"></a>第一个参数 HTML代码</h4><p>如果传入的 <strong><code>字符串参数</code></strong> 像 一段 <strong>HTML 代码</strong>，(例如，字符串中含有<tag..>),jQuery会尝试用这段 HTML 代码 创建新的 DOM 元素，并创建一个包含了这些 DOM 元素 引用的 jQuery 对象. </tag..></p>
<p>例如,下面的代码将把 HTML 代码转换成 DOM 元素并插入 body 节点的末尾:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'&lt;p id="test"&gt;My &lt;em&gt;new&lt;/em&gt; text &lt;/p&gt;'</span>).appendTo(<span class="string">'body'</span>);</div></pre></td></tr></table></figure>
<p>如果 HTML 代码 是一个单独标签，例如，$(‘<img>‘)或$(‘<a></a>‘),jQuery 会使用浏览器原生方法  document.creatElement() 创建 DOM 元素。如果是比单独标签更复杂的 HTML 片段，例如上面例子的 $(‘</p><p id="test">My <em>new</em> text </p>‘).appendTo(‘body’);，则利用浏览器的 innerHTML 机制创建 DOM 元素，这个过程有方法 jQuery。buildFragment() 和 方法 jQuery.clean() 实现。<br><br><br><br><p></p>
<h4 id="第二个参数-ownerDocument-和-props"><a href="#第二个参数-ownerDocument-和-props" class="headerlink" title="第二个参数 ownerDocument 和 props"></a>第二个参数 ownerDocument 和 props</h4><p>第二个参数 <strong><code>ownerDocument</code></strong> 用于指定创建新 DOM 元素的文档对象，如果不传入，则默认为 当前文档对象。</p>
<p>如果 HTML 代码是一个单独标签，那么第二个参数还可以是 <strong><code>props</code></strong>.<br>props 是一个包含了属性、事件的 普通对象。<br>在调用 document.creatElement()创建 DOM 元素后，参数 props 会被传给 jQuery 方法 .attr(),然后由 .attr() 负责把参数 props 中的属性、事件设置到新创建的 DOM 元素上。</p>
<ul>
<li>参数 props 的属性可以是任意的 事件类型 (如: “click”),此时 属性值 应该是 事件监听函数，它将被绑定到新创建的 DOM 元素上; </li>
<li>参数 props 可以含有以下特殊属性: val、css、html、text、data、width、height、offset，相应的 jQuery 方法: .val() .css() .html() .text() .data() .text() .width() .height() .offset()将被执行，并且属性值会作为参数传入，其他类型的属性则会被设置到新创建的 DOM 元素上；</li>
<li>某些特殊属性还会做 跨浏览器兼容 (如 type、value、tabindex等)；</li>
<li>可以通过属性名 class 设置类样式，但要用 引号 把 class 包裹起来，因为class 是 JavaScript 保留字。例如：</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//功能：创建一个 div 元素，并设置类样式 为"test"、设置文本内容为 "Click me!"、绑定一个click事件</span></div><div class="line"><span class="comment">//然后插入到 body 节点的末尾，当点击该 div 元素时，还会切换类样式</span></div><div class="line"></div><div class="line">$(<span class="string">"&lt;div/&gt;"</span>, &#123;</div><div class="line">    <span class="string">"class"</span>: <span class="string">"test"</span>,</div><div class="line">    <span class="attr">text</span>: <span class="string">"Click me!"</span>,</div><div class="line">    <span class="attr">click</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).toggleClass(<span class="string">"test"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;).appendTo(<span class="string">"body"</span>);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> jQuery技术学习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[自调用执行函数]]></title>
      <url>/2016/03/14/%E8%87%AA%E8%B0%83%E7%94%A8%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<hr>
<p>在前辈的基础上，添加了一些自己的理解，记录了自己不熟悉的知识点和盲点。</p>
<p>主要整理内容:</p>
<ul>
<li>自调用执行函数</li>
<li>使用自调用函数的好处</li>
<li>自调用匿名函数的 三种 等价写法</li>
</ul>
<hr>
<a id="more"></a>
<h2 id="自调用执行函数"><a href="#自调用执行函数" class="headerlink" title="自调用执行函数"></a>自调用执行函数</h2><ul>
<li>jQuery的所有代码被包裹在一个立即执行的匿名函数表达式中，这种结构称为”自调用匿名函数”.</li>
<li>当浏览器加载完jQuery文件后，自调用匿名函数会立即开始执行，初始化jQuery的各个模块.<!--more-->
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//jQuery中的相关代码如下：    </span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">window, undefined</span>) </span>&#123;</div><div class="line">    <span class="comment">//构建 jQuery对象</span></div><div class="line">    <span class="keyword">var</span> jQuery = ...</div><div class="line"></div><div class="line">        <span class="comment">// Expose jQuery to the global object</span></div><div class="line">        <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</div><div class="line">    <span class="keyword">return</span> jQuery;</div><div class="line">&#125;)(<span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<h2 id="为什么创建这样一个自调用匿名函数？"><a href="#为什么创建这样一个自调用匿名函数？" class="headerlink" title="为什么创建这样一个自调用匿名函数？"></a>为什么创建这样一个自调用匿名函数？</h2><pre><code>通过创建一个自调用执行函数，创建了一个特殊的函数作用域(之前写过关于沙箱模式的一些理解，可以参考理解),该作用域中的代码不会和已有的同名函数、方法名和变量以及
第三方库冲突。

闭包可以确保jQuery的代码不受其他代码的干扰，并且jQuery也不会破坏或者最小程度的破坏和污染全局变量，降低对其他代码的影响。

在自调用匿名函数的最后，通过手动把变量jQuery添加到window对象上，明确地使变量jQuery成为公开的全局变量，而其他的部分将是私有的。
</code></pre><h2 id="自调用匿名函数的-三种-等价写法"><a href="#自调用匿名函数的-三种-等价写法" class="headerlink" title="自调用匿名函数的 三种 等价写法"></a>自调用匿名函数的 三种 等价写法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//写法1 (常用写法，jQuery采用这一种)</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">//写法2</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;());</div><div class="line"></div><div class="line"><span class="comment">//写法3</span></div><div class="line">! <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;();</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="为什么要为自调用匿名函数传入参数-window，并传入window对象？"><a href="#为什么要为自调用匿名函数传入参数-window，并传入window对象？" class="headerlink" title="为什么要为自调用匿名函数传入参数 window，并传入window对象？"></a>为什么要为自调用匿名函数传入参数 window，并传入window对象？</h3><ol>
<li><p>通过传入 window 对象，可以使 window 对象变为局部变量( 即把函数参数作为局部变量使用 )，这样当在jQuery中访问 window 对象时，不需要将作用域链回退到顶层作用域，从而更快的访问 window 对象.</p>
</li>
<li><p>将 window 对象作为参数传入，可以在压缩代码时进行优化。<br>在压缩文件jQuery-1.7.1.min.js中被压缩为：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;...&#125;)(<span class="built_in">window</span>);</div><div class="line"><span class="comment">//参数 window 被压缩为 a,参数 underfined 被压缩为 b</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="为什么要为自调用函数设置参数-undefined"><a href="#为什么要为自调用函数设置参数-undefined" class="headerlink" title="为什么要为自调用函数设置参数 undefined ?"></a>为什么要为自调用函数设置参数 undefined ?</h3><p>特殊值 undefined 是 window 对象的一个属性。<br>通过下列代码可以验证：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(<span class="string">'undefined'</span> <span class="keyword">in</span> <span class="built_in">window</span>); <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<ol>
<li>通过把参数undefined 作为局部变量使用，但是又不传入任何值，可以缩短查找 undefined 时的作用域链.</li>
<li>并且可以在压缩代码时进行优化，如前面所示，undefined 会被压缩为 b .</li>
<li>更重要的原因是，通过这种方式可以确保参数 undefined 的值是 undefined .因为 undefined 有可能被重写为新的值。</li>
</ol>
<p><code>注意：</code></p>
<pre><code>使用自调用匿名函数时，最好不要省略其之前和之后的 分号，否则可能抛出异常.
</code></pre><p><strong>这个系列的学习都是基于高原著作的《jQuery技术内幕 深入解析jQuery架构设计与实现原理》的学习和理解. -感谢大神们的努力-</strong></p>
]]></content>
      
        <categories>
            
            <category> jQuery技术学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 自调用函数 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用 css 元素实现元素垂直居中]]></title>
      <url>/2016/03/03/center/</url>
      <content type="html"><![CDATA[<hr>
<ol>
<li><p>水平居中的方式</p>
</li>
<li><p>垂直居中的方式</p>
</li>
</ol>
<hr>
<h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><blockquote>
<p>1.水平居中: 行内元素解决方案</p>
</blockquote>
<p>只需要将行内元素包裹在一个属性为block的父级元素中，并把这个父级元素添加如下属性即可:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">text-align:center;</div></pre></td></tr></table></figure></p>
<p><code>试用元素:</code><br>    文字、链接、其它inline或者inline-*类型的元素(如 inline-block,inline-table,inline-flex)<br><code>实例:</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/*CSS代码片段*/</div><div class="line">nav, div&#123;</div><div class="line">  text-align: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*Html代码片段*/</div><div class="line">&lt;div&gt;文字元素&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;nav&gt;</div><div class="line">  &lt;a href=""&gt;链接元素01&lt;/a&gt;</div><div class="line">  &lt;a href=""&gt;链接元素02&lt;/a&gt;</div><div class="line">  &lt;a href=""&gt;链接元素03&lt;/a&gt;</div><div class="line">&lt;/nav&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>2.水平居中: 块级元素解决方案<br><a id="more"></a><br>对于块级元素( display:block )来说，我们需要将它的外边距(即 margin-left和margin-right )设置为auto，即可实现块级元素的居中。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.center</span>&#123;</div><div class="line">  <span class="comment">/* 这里可以设置顶端外边距 */</span></div><div class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>实例:</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*CSS 代码片段*/</span></div><div class="line"><span class="comment">/*</span></div><div class="line">解决方案：</div><div class="line">添加margin-left，margin-right属性值为auto即可，如下：</div><div class="line">margin: 0 auto;</div><div class="line">注意：需要居中的块元素需要有固定的宽度，否则无法实现居中，因为占据100%宽度</div><div class="line">*/</div><div class="line"><span class="selector-tag">div</span>,<span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>; <span class="comment">/* 这里需要设置元素宽度 */</span></div><div class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#222</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#FFF</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 定义居中关键属性 */</span></div><div class="line"><span class="selector-class">.center</span>&#123;</div><div class="line">  <span class="comment">/* 这里可以设置顶端外边距 */</span></div><div class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--HTML 代码片段--&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">居中元素：块状元素，如(div, p, section 等等元素），即display属性为block的元素</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">    水平居中的块级元素</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span> 水平居中的块级元素 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--现在可以看到居中效果的块状元素了 --&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>3.水平居中: 多个块状元素解决方案</p>
</blockquote>
<p>如果页面里有多个块状元素需要水平排列居中，可以将元素的display属性设置为inline-block，并且把父元素的text-align属性设置为center即可实现。</p>
<p><code>实例:</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"></div><div class="line">解决方案：</div><div class="line"></div><div class="line">设置这几个块状的元素display属性为inline-block，并且设置父元素text-align属性为center即可</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"><span class="selector-class">.center</span>&#123;</div><div class="line">  <span class="attribute">display</span>:inline-block;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">  <span class="attribute">text-align</span>:center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 元素美化 */</span></div><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#222</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#FFF</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--HTMl 代码片段--&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">居中类型：水平居中</div><div class="line">居中元素：“多个”块状元素水平横向排列居中</div><div class="line">--&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>水平居中的块状元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>水平居中的块状元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line"></div><div class="line">现在可以看到以上两个块状元素水平横向排列并且居中</div><div class="line"></div><div class="line">提示：如果需要将以上两个元素垂直排列居中的话，使用上一节的margin: 0 auto;即可实现</div><div class="line"></div><div class="line">--&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>4.水平居中:多个块级元素解决方案(使用flexbox布局实现)</p>
</blockquote>
<p>使用<code>flexbox</code>布局，只需要把待处理的块状元素的父元素添加属性<code>display:flex</code>及<code>justify-content:center</code>即可</p>
<p><code>实例:</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*css代码片段*/</span></div><div class="line"><span class="comment">/*</span></div><div class="line"></div><div class="line">解决方案：</div><div class="line"></div><div class="line">设置需要水平居中的块状元素的父元素display为flex ，并且justify-content属性为center即可</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 页面美化元素 */</span></div><div class="line"></div><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#222</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#FFF</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--html 代码片段--&gt;</span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line"></div><div class="line">居中类型：水平居中</div><div class="line">居中元素：“多个”块状元素水平横向排列居中 (使用flexbox布局实现)</div><div class="line"></div><div class="line">--&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>水平居中的块状元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>水平居中的块状元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><blockquote>
<p>1.垂直居中:单行的行内元素解决方案</p>
</blockquote>
<p>当一个行内元素，即inline,inline-*类型的元素需要居中的话，可以将它的line-height设置为父元素的高度，即可实现垂直居中的效果。</p>
<p><code>实例:</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"></div><div class="line">解决方案：将inline元素的line-height设为一致即可</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"><span class="selector-id">#container</span>&#123;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#222</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*  以下代码中，将a元素line-height设置的和父元素一样高度即可实现垂直居中 */</span></div><div class="line"><span class="selector-tag">a</span>&#123;</div><div class="line">  <span class="attribute">line-height</span>:<span class="number">200px</span>;  </div><div class="line">  <span class="attribute">color</span>: <span class="number">#FFF</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line"></div><div class="line">居中类型：垂直居中</div><div class="line">居中元素：单行的inline类型元素，文字或者链接等</div><div class="line"></div><div class="line">--&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>hello, xiaolili<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>2.垂直居中:多行的行内元素解决方案( Inline-Block )</p>
</blockquote>
<p>组合使用<code>display:table-cell</code>和<code>vertical-align:middle</code>属性和<code>和一个伪元素让内容块处于容器中央</code>来定义需要居中的元素的父容器元素生成效果.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Center-Container is-Inline"</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Center-Block"</span>&gt;</span>  </div><div class="line">    <span class="comment">&lt;!-- CONTENT --&gt;</span>  </div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">添加了一些小技巧:</div><div class="line">如果内容块宽度大于容器宽度，比如放了一个很长的文本，</div><div class="line">但内容块宽度设置最大不能超过容器的100%减去0.25em，</div><div class="line">否则使用伪元素:after内容块会被挤到容器顶部，</div><div class="line">使用:before内容块会向下偏移100%。</div><div class="line"></div><div class="line">如果你的内容块需要占据尽可能多的水平空间，</div><div class="line">可以使用max-width: 99%;（针对较大的容器）</div><div class="line">或max-width: calc(100% -0.25em)（取决于支持的浏览器和容器宽度）。</div><div class="line"></div><div class="line">*/</div><div class="line"><span class="selector-class">.Center-Container</span><span class="selector-class">.is-Inline</span> &#123;   </div><div class="line">  <span class="attribute">text-align</span>: center;  </div><div class="line">  <span class="attribute">overflow</span>: auto;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="selector-class">.Center-Container</span><span class="selector-class">.is-Inline</span><span class="selector-pseudo">:after</span>,  </div><div class="line"><span class="selector-class">.is-Inline</span> <span class="selector-class">.Center-Block</span> &#123;  </div><div class="line">  <span class="attribute">display</span>: inline-block;  </div><div class="line">  <span class="attribute">vertical-align</span>: middle;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="selector-class">.Center-Container</span><span class="selector-class">.is-Inline</span><span class="selector-pseudo">:after</span> &#123;  </div><div class="line">  <span class="attribute">content</span>: <span class="string">''</span>;  </div><div class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;  </div><div class="line">  <span class="attribute">margin-left</span>: -<span class="number">0.25em</span>; <span class="comment">/* To offset spacing. May vary by font */</span>  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="selector-class">.is-Inline</span> <span class="selector-class">.Center-Block</span> &#123;  </div><div class="line">  <span class="attribute">max-width</span>: <span class="number">99%</span>; <span class="comment">/* Prevents issues with long content causes the content block to be pushed to the top */</span>  </div><div class="line">  <span class="comment">/* max-width: calc(100% - 0.25em) /* Only for IE9+ */</span>   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>优点：</code></p>
<ol>
<li>高度可变</li>
<li>内容溢出会将父元素撑开。</li>
<li>支持跨浏览器，也适应于IE7。</li>
</ol>
<p><code>缺点：</code></p>
<ol>
<li>需要一个容器</li>
<li>水平居中依赖于margin-left: -0.25em;该尺寸对于不同的字体/字号需要调整。</li>
<li>内容块宽度不能超过容器的100% - 0.25em。</li>
</ol>
<blockquote>
<p>3.垂直居中:负外边距(Negative Margins)</p>
</blockquote>
<p>如果块元素尺寸已知，可以通过以下方式让内容块居中于容器显示：<br>外边距margin取负数，大小为width/height（不使用box-sizing: border-box时包括padding，）的一半，再加上top: 50%; left: 50%;。即：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.is-Negative</span> &#123;  </div><div class="line">        <span class="attribute">width</span>: <span class="number">300px</span>;  </div><div class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;  </div><div class="line">        <span class="attribute">padding</span>: <span class="number">20px</span>;  </div><div class="line">        <span class="attribute">position</span>: absolute;  </div><div class="line">        <span class="attribute">top</span>: <span class="number">50%</span>; <span class="attribute">left</span>: <span class="number">50%</span>;  </div><div class="line">        <span class="attribute">margin-left</span>: -<span class="number">170px</span>; <span class="comment">/* (width + padding)/2 */</span>  </div><div class="line">        <span class="attribute">margin-top</span>: -<span class="number">120px</span>; <span class="comment">/* (height + padding)/2 */</span>  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试表明，这是唯一在IE6-IE7上也表现良好的方法。</p>
<p><code>优点</code>：</p>
<ol>
<li>良好的跨浏览器特性，兼容IE6-IE7。</li>
<li>代码量少。</li>
</ol>
<p><code>缺点：</code></p>
<ol>
<li>不能自适应。不支持百分比尺寸和min-/max-属性设置。</li>
<li>内容可能溢出容器。</li>
<li>边距大小与padding,和是否定义box-sizing: border-box有关，计算需要根据不同情况。<blockquote>
<p>4.垂直居中: 变形(Transforms)</p>
</blockquote>
</li>
</ol>
<p>内容块定义transform: translate(-50%,-50%)必须带上浏览器厂商的前缀，还要加上</p>
<p>top: 50%; left: 50%;</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.is-Transformed</span> &#123;   </div><div class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;  </div><div class="line">  <span class="attribute">margin</span>: auto;  </div><div class="line">  <span class="attribute">position</span>: absolute;  </div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>; <span class="attribute">left</span>: <span class="number">50%</span>;  </div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-50%,-50%);  </div><div class="line">      <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-50%,-50%);  </div><div class="line">          <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>优点：</code></p>
<ol>
<li>内容可变高度</li>
<li>代码量少</li>
</ol>
<p><code>缺点：</code></p>
<ol>
<li><p>IE8不支持</p>
</li>
<li><p>属性需要写浏览器厂商前缀</p>
</li>
<li><p>可能干扰其他transform效果</p>
</li>
<li><p>某些情形下会出现文本或元素边界渲染模糊的现象</p>
</li>
</ol>
<blockquote>
<p>5.垂直居中:表格单元格( Table-Cell )</p>
</blockquote>
<p>总的说来这可能是最好的居中实现方法，因为内容块高度会随着实际内容的高度变化，浏览器对此的兼容性也好。最大的缺点是需要大量额外的标记，需要三层元素让最内层的元素居中。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">内层元素使用 display:table-cell</div><div class="line">外层元素使用 display:table</div><div class="line">*/</div><div class="line"><span class="selector-class">.Center-Container</span><span class="selector-class">.is-Table</span> &#123; <span class="attribute">display</span>: table; &#125;  </div><div class="line"><span class="selector-class">.is-Table</span> <span class="selector-class">.Table-Cell</span> &#123;  </div><div class="line">  <span class="attribute">display</span>: table-cell;  </div><div class="line">  <span class="attribute">vertical-align</span>: middle;  </div><div class="line">&#125;  </div><div class="line"><span class="selector-class">.is-Table</span> <span class="selector-class">.Center-Block</span> &#123;  </div><div class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;  </div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Center-Container is-Table"</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Table-Cell"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Center-Block"</span>&gt;</span>  </div><div class="line">    <span class="comment">&lt;!-- CONTENT --&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>优点：</code></p>
<ol>
<li><p>高度可变</p>
</li>
<li><p>内容溢出会将父元素撑开。</p>
</li>
<li><p>跨浏览器兼容性好。</p>
</li>
</ol>
<p><code>缺点：</code></p>
<p>需要额外html标记</p>
<blockquote>
<p>6.垂直居中: 利用Flexbox实现垂直居中</p>
</blockquote>
<p>这是CSS布局未来的趋势。Flexbox是css3新增属性，设计初衷是为了解决像垂直居中这样的常见布局问题.<br>记住Flexbox不只是用于居中，也可以分栏或者解决一些令人抓狂的布局问题。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*父元素*/</span></div><div class="line"><span class="selector-class">.container</span>&#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">      <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">      <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#546461</span>;</div><div class="line">      <span class="attribute">display</span>: flex;<span class="comment">/*1*/</span></div><div class="line">      <span class="attribute">display</span>: -webkit-flex;</div><div class="line">      <span class="attribute">align-items</span>: center;<span class="comment">/*2*/</span></div><div class="line">      <span class="attribute">-webkit-align-items</span>: center;</div><div class="line">      <span class="attribute">justify-content</span>: center;<span class="comment">/*3*/</span></div><div class="line">      <span class="attribute">-webkit-justify-content</span>: center;</div><div class="line"> &#125;</div><div class="line"> <span class="comment">/*子元素*/</span></div><div class="line"> <span class="selector-class">.inner</span>&#123;</div><div class="line">      <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#458761</span>;</div><div class="line">      <span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p><code>优点：</code></p>
<ol>
<li>内容块的宽高任意，优雅的溢出。</li>
<li>可用于更复杂高级的布局技术中。</li>
</ol>
<p><code>缺点：</code></p>
<ol>
<li>IE8/IE9不支持。</li>
<li>Body需要特定的容器和CSS样式。</li>
<li>运行于现代浏览器上的代码需要浏览器厂商前缀。</li>
<li>表现上可能会有一些问题。</li>
</ol>
<blockquote>
<p>7.绝对居中( Absolute Centering ) <font color="red"><strong>强烈推荐</strong></font></p>
</blockquote>
<p>我们经常用margin:0 auto来实现水平居中，而一直认为margin:auto不能实现垂直居中……实际上，实现垂直居中仅需要声明元素高度和下面的CSS:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.Absolute-Center</span> &#123;  </div><div class="line">  <span class="attribute">margin</span>: auto;  </div><div class="line">  <span class="attribute">position</span>: absolute;  </div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong><code>居中方式:</code></strong></p>
<!--一. 容器内( Within Container )-->
<p>内容块的父容器设置为position:relative，使用上述绝对居中方式，可以使内容居中显示于父容器。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.Center-Container</span> &#123;  </div><div class="line">  <span class="attribute">position</span>: relative;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="selector-class">.Absolute-Center</span> &#123;  </div><div class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;  </div><div class="line">  <span class="attribute">height</span>: <span class="number">50%</span>;  </div><div class="line">  <span class="attribute">overflow</span>: auto;  </div><div class="line">  <span class="attribute">margin</span>: auto;  </div><div class="line">  <span class="attribute">position</span>: absolute;  </div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<!--![容器container内的居中]( http://img.blog.csdn.net/20130911210011046?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZnJlc2hsb3Zlcg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast   "容器container内的居中")-->
<!--以下其余的demo默认上面的CSS样式已引用包括进去，在此基础上只提供额外的类供用户追加以实现不同的功能。

二. 视区内（Within Viewport）

想让内容块一直停留在可视区域内？将内容块设置为position:fixed;并设置一个较大的z-index层叠属性值。

<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.Absolute-Center</span><span class="selector-class">.is-Fixed</span> &#123;  </div><div class="line">  <span class="attribute">position</span>: fixed;  </div><div class="line">  <span class="attribute">z-index</span>: <span class="number">999</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20130911210041875?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZnJlc2hsb3Zlcg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="&quot;视区内的绝对居中&quot;" title="视区内的绝对居中"></p>
<p>注意：对MobileSafari，若内容块不是放在设置为position:relative;的父容器中，内容块将垂直居中于整个文档，而不是可视区域内垂直居中。</p>
<p>三. 边栏( Offsets )</p>
<p>如果你要设置一个固顶的头或增加其他的边栏，只需要在内容块的样式中加入像这样的CSS样式代码：top:70px;bottom:auto;由于已经声明了margin:auto;，该内容块将会垂直居中于你通过top,left,bottom和right属性定义的边界框内。</p>
<p>你可以将内容块固定与屏幕的左侧或右侧，并且保持内容块垂直居中。使用right:0;left:auto;固定于屏幕右侧，使用left:0;right:auto;固定与屏幕左侧。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.Absolute-Center</span><span class="selector-class">.is-Right</span> &#123;  </div><div class="line">  <span class="attribute">left</span>: auto; <span class="attribute">right</span>: <span class="number">20px</span>;  </div><div class="line">  <span class="attribute">text-align</span>: right;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="selector-class">.Absolute-Center</span><span class="selector-class">.is-Left</span> &#123;  </div><div class="line">  <span class="attribute">right</span>: auto; <span class="attribute">left</span>: <span class="number">20px</span>;  </div><div class="line">  <span class="attribute">text-align</span>: left;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20130911210114921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZnJlc2hsb3Zlcg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="&quot;视区内的绝对居中&quot;" title="视区内的绝对居中"></p>
<p>四. 响应式/自适应(Responsive)</p>
<p>绝对居中最大的优势应该就是对百分比形式的宽高支持的非常完美。甚至min-width/max-width 和min-height/max-height这些属性在自适应盒子内的表现也和预期很一致。</p>
<p><img src="http://img.blog.csdn.net/20130911210138375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZnJlc2hsb3Zlcg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="&quot;响应式绝对居中&quot;" title="响应式绝对居中"></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.Absolute-Center</span><span class="selector-class">.is-Responsive</span> &#123;  </div><div class="line">  <span class="attribute">width</span>: <span class="number">60%</span>;   </div><div class="line">  <span class="attribute">height</span>: <span class="number">60%</span>;  </div><div class="line">  <span class="attribute">min-width</span>: <span class="number">200px</span>;  </div><div class="line">  <span class="attribute">max-width</span>: <span class="number">400px</span>;  </div><div class="line">  <span class="attribute">padding</span>: <span class="number">40px</span>;  </div><div class="line">&#125;  </div><div class="line">给内容块元素加上<span class="selector-tag">padding</span>也不影响内容块元素的绝对居中实现。</div></pre></td></tr></table></figure>
<p>五. 溢出情况( Overflow )</p>
<p>内容高度大于块元素或容器（视区viewport或设为position:relative的父容器）会溢出，这时内容可能会显示到块与容器的外面，或者被截断出现显示不全（分别对应内容块overflow属性设置为visible和hidden的表现）。</p>
<p>加上overflow: auto会在内容高度超过容器高度的情况下给内容块显示滚动条而不越界。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.Absolute-Center</span><span class="selector-class">.is-Overflow</span> &#123;  </div><div class="line">  <span class="attribute">overflow</span>: auto;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20130911210156921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZnJlc2hsb3Zlcg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="&quot;溢出居中&quot;" title="溢出居中"></p>
<p>六. 重绘(Resizing)</p>
<p>你可以使用其他class类或JavaScript代码来重绘内容块同时保证居中，无须手动重新计算中心尺寸。当然，你也可以添加resize属性来让用户拖拽实现内容块的重绘。</p>
<p>绝对居中（Absolute Centering）可以保证内容块始终居中，无论内容块是否重绘。可以通过设置min-/max-来根据自己需要限制内容块的大小，并防止内容溢出窗口/容器。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.Absolute-Center</span><span class="selector-class">.is-Resizable</span> &#123;  </div><div class="line">  <span class="attribute">min-width</span>: <span class="number">20%</span>;  </div><div class="line">  <span class="attribute">max-width</span>: <span class="number">80%</span>;  </div><div class="line">  <span class="attribute">min-height</span>: <span class="number">20%</span>;  </div><div class="line">  <span class="attribute">max-height</span>: <span class="number">80%</span>;  </div><div class="line">  <span class="attribute">resize</span>: both;  </div><div class="line">  <span class="attribute">overflow</span>: auto;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20130911210208406?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZnJlc2hsb3Zlcg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="&quot;溢出居中&quot;" title="溢出居中">–&gt;</p>
-->]]></content>
      
        <categories>
            
            <category> CSS学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> 垂直居中 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js some,foreach,map,filter,every对比]]></title>
      <url>/2016/02/12/some-every/</url>
      <content type="html"><![CDATA[<p>希望通过这篇笔记,加深自己对 ES5 新增的数组方法的理解,可以帮我们少一些 for 循环.</p>
<blockquote>
<p><strong>[…].some(ck)函数       —-      某个一个为true,则为true</strong></p>
</blockquote>
<ol>
<li>some意指”某些”,指是否”某些项”合乎条件。</li>
<li>皇上:有一个满意的，就来侍寝就可以了。<br> (对数组中每个元素执行一次ck函数,直到某个元素返回true,则直接返回true。如果都返回false,则返回false。)</li>
<li>返回值为 Boolean 值。</li>
</ol>
<p>检查整个数组中是否有满足ck函数的元素。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>].some(  <span class="function">(<span class="params">v,i</span>)  =&gt;</span>  (v&gt;<span class="number">10</span>) )      </div><div class="line"><span class="comment">//所有元素都不满足，返回result = false</span></div><div class="line"><span class="keyword">var</span> result = [<span class="number">10</span>,<span class="number">5</span>,<span class="number">30</span>,<span class="number">60</span>].some(  <span class="function">(<span class="params">v,i</span>)  =&gt;</span>  (v&lt;<span class="number">10</span>) )      </div><div class="line"><span class="comment">//有一个(多个)满足，返回result  = true</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<blockquote>
<p><strong>[…].every(ck)函数     —-          某一个为false，则返回false</strong> </p>
</blockquote>
<ul>
<li>跟some为基友关系，同样是返回Boolean值。</li>
<li>与some相比就是true和false调换一下。<br>  (每个数组元素都执行一次ck函数，直到某个元素执行函数ck返回false,则直接返回false,如果全部返回true，则返回true)</li>
<li>不过，every需要每一个妃子都要让朕满意，否则——“来人，给我拖出去砍了！”<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = [<span class="number">5</span>,<span class="number">50</span>,<span class="number">35</span>,<span class="number">12</span>,<span class="number">85</span>].every( <span class="function">(<span class="params">v,i</span>) =&gt;</span> v&lt;<span class="number">51</span> )  </div><div class="line"><span class="comment">//返回有一个(多个)大于等于51,则返回 result = false</span></div><div class="line"><span class="keyword">var</span> result = [<span class="number">5</span>,<span class="number">50</span>,<span class="number">35</span>,<span class="number">12</span>,<span class="number">85</span>].every( <span class="function">(<span class="params">v,i</span>) =&gt;</span> v&lt;<span class="number">100</span> ) </div><div class="line"> <span class="comment">//全部小于100,则返回 result = true</span></div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p><strong>[…].foreach(ck)函数       —-       循环而已</strong></p>
</blockquote>
<p>每个数组元素都执行一次ck函数，foreach函数无法用break跳出</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="number">50</span>, <span class="number">25</span>, <span class="number">49</span>].forEach( <span class="function">(<span class="params">v,i</span>) =&gt;</span> <span class="built_in">console</span>.log(v) );</div><div class="line"><span class="comment">//50     25      49</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>[…].filter(ck)函数      —-        得到返回值为true的元素的集合</strong></p>
</blockquote>
<p>每个数组元素都执行一次ck函数，最后返回每次元素执行ck函数后返回值的为true的元素集合(<strong>数组</strong>)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> newArray = [<span class="number">50</span>,<span class="number">2</span>,<span class="number">60</span>,<span class="number">4</span>,<span class="number">53</span>,<span class="number">15</span>].filter( <span class="function">(<span class="params">v,i</span>) =&gt;</span> (v&gt;<span class="number">10</span>) ) </div><div class="line"><span class="comment">//返回数组中大于10的元素新数组  newArray = [50,60,53,15]</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>[…].reduce(ck,init)      —-       依次执行ck(prv,next)</strong> </p>
</blockquote>
<p>数组依次执行ck函数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">restult.reduce(<span class="function">(<span class="params">a,b</span>)=&gt;</span> a+b,<span class="number">0</span>)  <span class="comment">// 返回 6</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>[…].map(ck)函数      —-         返回每个元素返回值的集合</strong></p>
</blockquote>
<p>每个数组元素都执行一次ck函数，最后返回每次元素执行ck函数后返回值的集合(数组)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> newArray = [<span class="number">50</span>,<span class="number">30</span>,<span class="number">40</span>].map( <span class="function">(<span class="params">v,i</span>) =&gt;</span> v/<span class="number">10</span> )       </div><div class="line"><span class="comment">//每个元素除以10，最后返回一个新数组 newArray = [5,3,4]</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> JavaScript学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> some </tag>
            
            <tag> foreach </tag>
            
            <tag> map </tag>
            
            <tag> filter </tag>
            
            <tag> every </tag>
            
            <tag> JS数组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js 静态方法和实例方法的区别]]></title>
      <url>/2016/01/12/staticMethod/</url>
      <content type="html"><![CDATA[<hr>
<p>希望通过这篇笔记，加深自己对 JavaScript 对象里面的<strong>静态方法</strong>、<strong>实例方法</strong>的理解。<br>把自己理解整理如下结构:</p>
<ul>
<li>静态方法和实例方法的声明方式</li>
<li>静态方法和实例方法的调用方式</li>
</ul>
<hr>
<a id="more"></a>
<blockquote>
<p>静态方法和实例方法的声明方式</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params">a, n</span>)</span>&#123;  </div><div class="line">    <span class="keyword">this</span>.a = a||<span class="string">'年龄'</span>;  </div><div class="line">    <span class="keyword">this</span>.n = n||<span class="string">'名字'</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//声明静态变量  </span></div><div class="line">user.sayname = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">    alert(<span class="keyword">this</span>.name);  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//声明动态变量  </span></div><div class="line">user.prototype.sayname2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">    alert(<span class="keyword">this</span>.name);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>静态方法和实例方法的调用方式</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> </div><div class="line">&#125;</div><div class="line">A.staticMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">'静态方法'</span>);</div><div class="line">&#125;</div><div class="line">A.prototype.instaceMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">'实例方法'</span>);</div><div class="line">&#125;</div><div class="line">A.staticMethod();</div><div class="line"><span class="keyword">var</span> instace = <span class="keyword">new</span> A();</div><div class="line">instace.instaceMethod();</div></pre></td></tr></table></figure>
<p>可以这么理解，静态方法是类直接调用，实例方法要new 出来的对象才能调用。</p>
<blockquote>
<p>小结</p>
</blockquote>
<p>从定义上，实例方法要用到function这个对象中的prototype属性来定义，静态方法通过A.直接定义；<br>从方法调用上，静态方法可以直接通过A.来调用，实例方法要通过先定义一个引用变量，指向构造函数定义的新对象。</p>
]]></content>
      
        <categories>
            
            <category> JavaScript学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 静态方法 </tag>
            
            <tag> 动态实例方法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[闭包的学习]]></title>
      <url>/2015/09/12/%E9%97%AD%E5%8C%85/</url>
      <content type="html"><![CDATA[<h2 id="本文主要记录了自己关于闭包的理解，和闭包的应用"><a href="#本文主要记录了自己关于闭包的理解，和闭包的应用" class="headerlink" title="本文主要记录了自己关于闭包的理解，和闭包的应用"></a>本文主要记录了自己关于闭包的理解，和闭包的应用</h2><h3 id="闭包的概念"><a href="#闭包的概念" class="headerlink" title="闭包的概念"></a>闭包的概念</h3><pre><code>闭包，就是函数在调用的时候，产生的那个内存结构，外界不能访问里面，它就是一个封闭的包裹结构，即闭包。
</code></pre><p><strong>注意</strong></p>
<ul>
<li>函数定义后，放置在那里,只是一个普通的对象，不会创建任何内存，也不会影响到其他任何东西;</li>
<li>只有函数运行起来，在函数执行过程中，在 结束之前，函数会构成一个封闭的空间；</li>
<li>根据词法作用域，函数内在访问变量的时候，如果函数内没有可以到函数外面查找，反之不行；</li>
<li>同时函数也包含了一定的范围；</li>
<li>结合一下， 此时在函数结束之前，函数构成了一个封闭的包裹的结构，此为闭包。</li>
</ul>
<a id="more"></a>
<blockquote>
<h3 id="如何保留函数内存的访问能力"><a href="#如何保留函数内存的访问能力" class="headerlink" title="如何保留函数内存的访问能力"></a>如何保留函数内存的访问能力</h3></blockquote>
<pre><code>函数在执行完之后，会释放其占用的内存。
如果可以让函数调用之后，不释放其内存，这个闭包才会有作用。
函数执行结束之后，如果保存其内存的访问能力，该内存就不会被释放。
</code></pre><p><code>闭包要使用，有一个经典的代码，一定要有：</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> num;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> func;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f = foo();</div></pre></td></tr></table></figure>
<p><code>思考：</code><br>闭包到底构成了什么东西(有闭包和没有闭包有什么不同，闭包给我们提供了一个什么样的功能)？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">发现，闭包改变了变量的访问规则( 改变了作用域 ).</div><div class="line">闭包 给我们提供了一个 私有作用域.</div><div class="line">凡是需要 保护 使用 的数据都可以放到私有作用域中.</div></pre></td></tr></table></figure>
<p><code>思考：函数就是闭包？</code></p>
<pre><code>这种理解并不准确。当函数 **被调用** 的时候，才会产生闭包。
举个例子，有一个铅笔，把它放在头发上来回摩擦，摩擦这个动作会产生静电。
但如果把铅笔放在桌子上，啥也不做，就不会产生静电。
而且摩擦产生静电之后，如果不继续保持摩擦，静电就会消失。因此我们需要保持持续的摩擦。
</code></pre><blockquote>
<h2 id="闭包的几种应用"><a href="#闭包的几种应用" class="headerlink" title="闭包的几种应用"></a>闭包的几种应用</h2></blockquote>
<h3 id="1-沙箱模式"><a href="#1-沙箱模式" class="headerlink" title="1.沙箱模式"></a><font color="deeppink">1.沙箱模式</font></h3><p><code>那么什么是沙箱呢？</code></p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">沙箱 可以用一个我们生活中的例子来描述： 网上下载的软件，但是我们并不知道下载的软件有没有病毒，一般的杀毒软件都会提供一个沙箱运行模式。</div><div class="line"></div><div class="line">其特点是在里面运行的任何程序，在沙箱重启后其影响会全部消失。但是沙箱会模拟当前操作系统的所有访问资源。</div><div class="line"></div><div class="line">在很多手机 app 中也有相应的沙箱模型。</div><div class="line"></div><div class="line">例如一个软件是病毒，安装之后，理论只允许其在自己所在的沙箱里面运行，不允许访问其他 app 所在的文件。</div></pre></td></tr></table></figure>
<font color="redwhite">因此沙箱的特点就是：既可以运行，又可以脱离。</font>

<p>我们知道，自己在封装一些东西的时候，容易出现 <strong>全局污染</strong>.<br>我们可以把其放到一个沙箱中，留出一个允许别人使用的 接口( 函数， 对象 ) . 我们的代码不会或者最小程度的影响到外界代码。</p>
<p><code>如何构成沙箱呢，我们可以使用下面的代码构成沙箱</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 代码</span></div><div class="line">    <span class="comment">// 1,...</span></div><div class="line">    <span class="comment">// 2,...</span></div><div class="line">    <span class="comment">// 3,...</span></div><div class="line"></div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>沙箱模式 可以保证数据内外隔离，但在实际开发中，我们需要预留一些 api 以供外界调用，有几个常见的返回模型。</p>
<blockquote>
<p>1.利用 返回值，返回一个 接口</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> func= (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">return</span> func;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<blockquote>
<p>2.利用 window 的属性返回多个数据</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ =jQuery;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<blockquote>
<p>3.利用 函数的调用中的函数调用模式 </p>
</blockquote>
<p>函数在调用的时候，默认 函数中的 this 就是 window. 因此第二种写法有一个变体：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">this</span>.jQuery = <span class="keyword">this</span>.$ = jQuery;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="2-利用闭包实现私有作用域-带私有作用域的函数"><a href="#2-利用闭包实现私有作用域-带私有作用域的函数" class="headerlink" title="2. 利用闭包实现私有作用域(带私有作用域的函数)"></a>2.<font color="deeppink"> 利用闭包实现私有作用域(带私有作用域的函数)</font></h3><p>代码模型：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一般写函数：</span></div><div class="line"><span class="keyword">var</span> foo =<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//函数体</span></div><div class="line">&#125;；</div><div class="line"><span class="comment">//可以使得函数具有私有内存</span></div><div class="line"><span class="keyword">var</span> foo = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//私有内存空间</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 函数体</span></div><div class="line">    &#125;；</div><div class="line">&#125;)();</div><div class="line"><span class="comment">//这个带有私有内存的函数，在实际开发中可以不使用，但是如果使用会比较方便</span></div></pre></td></tr></table></figure>
<p>让我们来看一个例子：</p>
<p><code>需求：</code></p>
<pre><code>1&gt; 将骆驼命名规则的字符串转换成使用 连字符连接的 字符串, 并且全小写

例如: &apos;getElementById&apos; =&gt; &apos;get-element-by-id&apos;

2&gt; 将用连字符连接的字符串, 转成骆驼命名规则的字符串, 例如:

&apos;get-element-by-id&apos; =&gt; &apos;getElementById&apos;
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将骆驼命名规则的字符串转换成使用 连字符连接的 字符串, 并且全小写</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> toCamlize = ( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> cache = &#123;&#125;;<span class="comment">//将缓存包裹到函数中</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">toCamlize</span>(<span class="params"> str </span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> ret = cache[ str ];</div><div class="line">        <span class="keyword">if</span> ( ret ) &#123;</div><div class="line">            <span class="comment">//判断内存中是否存在这个参数，如果存在，返回这个数的值</span></div><div class="line">            <span class="keyword">return</span> ret;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果缓存中不存在这个数</span></div><div class="line">            ret = str.replace( <span class="regexp">/-(.)/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">_,g</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> g.toUpperCase();</div><div class="line">            &#125;);</div><div class="line">            <span class="comment">//replace 的第二个参数可以是一个函数, 利用正则匹配字符, </span></div><div class="line">            <span class="comment">//每一个匹配会调用一次函数, 并且用函数的返回值来替换匹配到的结果.</span></div><div class="line">             <span class="comment">//重点是函数的参数, 回调函数的参数是如下方式分配的</span></div><div class="line"></div><div class="line">            <span class="comment">//function ( 匹配到的项, 第1组, 第2组, 第3组, ... ) &#123; ... &#125;</span></div><div class="line">            cache [ str ] = ret;<span class="comment">//将这个数添加到内存</span></div><div class="line">            <span class="keyword">return</span> ret;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//2&gt; 将用连字符连接的字符串, 转成骆驼命名规则的字符串</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> toBarCase = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> cache = &#123;&#125;;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">toBarCase</span>(<span class="params"> str </span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> ret = cache[ str ];</div><div class="line">      <span class="keyword">return</span> ret || </div><div class="line">             cache[ str ] = str.replace( <span class="regexp">/[A-Z]/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params"> s </span>) </span>&#123; </div><div class="line">               <span class="keyword">return</span> <span class="string">'-'</span> + s.toLowerCase(); </div><div class="line">             &#125; );</div><div class="line">    &#125;;</div><div class="line">  &#125;)();</div></pre></td></tr></table></figure>
<h3 id="3-保留运行时的数据"><a href="#3-保留运行时的数据" class="headerlink" title="3.保留运行时的数据"></a>3.保留运行时的数据</h3><p>–&gt; 闭包 是函数在执行过程中产生的一个私有的内存空间<br>    这个内存空间如果在函数执行结束后不释放，也可以保留数据</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 例如：</span></div><div class="line"><span class="keyword">var</span> func = (<span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="comment">// 私有的内存空间</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> （） </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;)(<span class="number">2</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//抽象一下</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFuncWidthSavable</span>(<span class="params"> value </span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> fn = createFuncWidthSavable( <span class="number">123</span> );</div></pre></td></tr></table></figure>
<p><code>利用这点，我们可以使用闭包实现0-9的打印</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ ) &#123;</div><div class="line">    setTimeout((<span class="function"><span class="keyword">function</span> (<span class="params"> value </span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log( value );</div><div class="line">    &#125;</div><div class="line">    &#125;)( i ), <span class="number">200</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// for ( let i = 0; i &lt; 10; i++ ) &#123;</span></div><div class="line"><span class="comment">//   setTimeout(function () &#123;</span></div><div class="line"><span class="comment">//       console.log( i );</span></div><div class="line"><span class="comment">//   &#125;, 200);</span></div><div class="line"><span class="comment">// &#125;</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> JavaScript学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面向对象 </tag>
            
            <tag> 闭包 </tag>
            
            <tag> 沙箱模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo部署博客的err]]></title>
      <url>/2015/09/12/hexo%20%E6%8A%A5%E9%94%99/</url>
      <content type="html"><![CDATA[<blockquote>
<h2 id="错误1"><a href="#错误1" class="headerlink" title="错误1"></a>错误1</h2></blockquote>
<p>在使用hexo部署博客到gitcafe的时候，出现了如下错误:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">INFO  Deploying: git</div><div class="line">INFO  Clearing .deploy_git folder...</div><div class="line">INFO  Copying files from public folder...</div><div class="line">fatal: Not a git repository (or any of the parent directories): .git</div><div class="line">FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</div><div class="line">Error: fatal: Not a git repository (or any of the parent directories): .git</div><div class="line"></div><div class="line">    at ChildProcess.&lt;anonymous&gt; (E:\blog\HexoBlog\node_modules\hexo-util\lib\spawn.js:37:17)</div><div class="line">    at emitTwo (events.js:87:13)</div><div class="line">    ……</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><code>解决方法</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">删除.deploy文件夹，重新生成即可解决该问题</div><div class="line">哈哈哈，抖机灵。成功。</div></pre></td></tr></table></figure>
<blockquote>
<h2 id="权限错误"><a href="#权限错误" class="headerlink" title="权限错误"></a>权限错误</h2></blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Permission denied (publickey).</div><div class="line">fatal: Could not read from remote repository.</div><div class="line"></div><div class="line">Please make sure you have the correct access rights</div><div class="line">and the repository exists.</div><div class="line">FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</div><div class="line">Error: Warning: Permanently added 'github.com,192.30.253.112' (RSA) to the list of known hosts.</div><div class="line">Permission denied (publickey).</div><div class="line">fatal: Could not read from remote repository.</div><div class="line"></div><div class="line">Please make sure you have the correct access rights</div></pre></td></tr></table></figure>
<p>有网友们有建议将deploy处设置不要使用https，而是改为SSH，如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">repository: https:<span class="comment">//github.com/username/username.github.io.git</span></div></pre></td></tr></table></figure>
<p>修改为:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">repo：git@github.com:username/username.github.io.git</div></pre></td></tr></table></figure>
<p>各种姿势修改都不对，究竟怎样使我们的博客可以重新部署到github上</p>
<blockquote>
<h2 id="当部署失败的时候，请按照以下步骤进行："><a href="#当部署失败的时候，请按照以下步骤进行：" class="headerlink" title="当部署失败的时候，请按照以下步骤进行："></a><strong>当部署失败的时候，请按照以下步骤进行：</strong></h2><h3 id="1-检查是否有SSH-key"><a href="#1-检查是否有SSH-key" class="headerlink" title="1.检查是否有SSH key"></a>1.检查是否有SSH key</h3></blockquote>
<p>登陆github，点击头像位置处 Settings ——&gt; SSH and GPG keys ，查看是否有SSH keys。如果有，直接跳到第（3）步；如果没有，则继续。</p>
<blockquote>
<h3 id="2-新建-SSH-key，在git-shell-或者git-bash等命令窗口-，注意大小写："><a href="#2-新建-SSH-key，在git-shell-或者git-bash等命令窗口-，注意大小写：" class="headerlink" title="2.新建 SSH key，在git shell(或者git bash等命令窗口)，注意大小写："></a>2.新建 SSH key，在git shell(或者git bash等命令窗口)，注意大小写：</h3></blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"邮箱名"</span></div></pre></td></tr></table></figure>
<p>然后出现:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file <span class="keyword">in</span> which to save the key (<span class="regexp">/c/</span>Users/dell/.ssh/id_rsa):</div></pre></td></tr></table></figure>
<p>直接回车就可以。<br>然后会出现：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</div><div class="line">Enter same passphrase again:</div></pre></td></tr></table></figure>
<p>要求你输入密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。</p>
<p>注意：输入密码的时候没有*字样的，直接输入就好。<br>然后会出现：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Your identification has been saved in /c/Users/dell/.ssh/id_rsa.</div><div class="line">Your public key has been saved in /c/Users/dell/.ssh/id_rsa.pub.</div><div class="line">The key fingerprint is:</div><div class="line">65:69:······02:4b emailname@email.com</div><div class="line">The key's randomart image is:</div><div class="line">+--[ RSA 2048]----+</div><div class="line">|                 |</div><div class="line">|       .   o .   |</div><div class="line">|    . o o = o    |</div><div class="line">|   . o * = o     |</div><div class="line">|  E  o + o .     |</div><div class="line">| . o.   . .      |</div><div class="line">|     ..          |</div><div class="line">+-----------------+</div></pre></td></tr></table></figure>
<p>至此，<code>密钥已经成功</code>生成</p>
<blockquote>
<h3 id="接下来在github上添加SSH-key："><a href="#接下来在github上添加SSH-key：" class="headerlink" title="接下来在github上添加SSH key："></a>接下来在github上添加SSH key：</h3></blockquote>
<p>① 打开本地文件：id_rsa.pub（文件路径可以在上一步SSH生成成功后看到路径，比如我的是c/Users/dell/.ssh/id_rsa.pub），可以将这个文件在编辑器中打开，然后全选复制。</p>
<p>② 登陆github，点击头像位置处 Settings ——&gt; SSH and GPG keys ——&gt; New SSH key，点击新建SSH key。</p>
<p>③ 将 ① 中复制的内容粘贴在key文本框里，title可以不用填（或者自己起一个名字也可以）。</p>
<blockquote>
<h3 id="4-测试设置是否成功："><a href="#4-测试设置是否成功：" class="headerlink" title="4.测试设置是否成功："></a>4.测试设置是否成功：</h3></blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure>
<p>出现：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hi username! You've successfully authenticated, but GitHub does not </div><div class="line">provide shell access.</div></pre></td></tr></table></figure>
<blockquote>
<h3 id="5-设置用户信息："><a href="#5-设置用户信息：" class="headerlink" title="5.设置用户信息："></a>5.设置用户信息：</h3></blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"用户名"</span></div><div class="line">$ git config --global user.email  <span class="string">"你希望的邮箱名"</span></div></pre></td></tr></table></figure>
<blockquote>
<h3 id="6-然后就可以部署你的博客到github了"><a href="#6-然后就可以部署你的博客到github了" class="headerlink" title="6.然后就可以部署你的博客到github了"></a>6.然后就可以部署你的博客到github了</h3></blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo d</div></pre></td></tr></table></figure>
<p><code>结束...</code></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[函数的四种调用模式]]></title>
      <url>/2015/09/12/%E5%87%BD%E6%95%B0%E7%9A%84%E5%9B%9B%E7%A7%8D%E8%B0%83%E7%94%A8%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="参数this在面向对象编程中非常重要，它的值取决于-调用的模式。"><a href="#参数this在面向对象编程中非常重要，它的值取决于-调用的模式。" class="headerlink" title="参数this在面向对象编程中非常重要，它的值取决于 调用的模式。"></a>参数this在面向对象编程中非常重要，它的值取决于 调用的模式。</h2><p><code>前言：</code></p>
<pre><code>函数一般分为四种调用模式：
1.函数调用模式： 一般独立函数调用
2.方法调用模式： 作为方法调用，一定要有一个引导对象(宿主对象)
3.构造器调用模式： 一定用来初始化对象，有 new 引导，return 可以重定向
4.上下文调用模式： apple 或 call 
</code></pre><h2 id="函数调用模式"><a href="#函数调用模式" class="headerlink" title="函数调用模式"></a>函数调用模式</h2><a id="more"></a>
<blockquote>
<p> 函数的定义方式</p>
</blockquote>
<ol>
<li>声明式 </li>
<li>表达式式 </li>
<li>Function</li>
</ol>
<blockquote>
<p> 单独独立调用的就是函数 </p>
</blockquote>
<p><code>函数名(参数);</code></p>
<blockquote>
<p>函数调用模式中，this 表示 全局对象 window</p>
<h2 id="方法调用模式"><a href="#方法调用模式" class="headerlink" title="方法调用模式"></a>方法调用模式</h2></blockquote>
<pre><code>方法本身就是函数，但是方法不是单独独立的使用，而是通过对象引导调用

对象.方法( 参数 );
</code></pre><blockquote>
<p>方法调用模式中， this 指向引导方法的对象</p>
<p>方法调用一定要有宿主对象</p>
<p>方法一定是 某个对象 的 方法。对象可以是任何对象</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span> );</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> o = &#123; <span class="attr">name</span> : <span class="string">"Tom"</span> &#125;;</div><div class="line">o.foo = foo;</div><div class="line">foo(); <span class="comment">//函数调用</span></div><div class="line">o.foo();<span class="comment">//方法调用</span></div><div class="line">--------------------------</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">' 函数也是是对象 '</span>);</div><div class="line">&#125;</div><div class="line">func.foo = foo;</div><div class="line">foo();<span class="comment">//函数调用</span></div><div class="line">func.foo();<span class="comment">//方法调用</span></div></pre></td></tr></table></figure>
<blockquote>
<h2 id="构造器调用模式-构造函数模式-或-构造方法模式"><a href="#构造器调用模式-构造函数模式-或-构造方法模式" class="headerlink" title="构造器调用模式(构造函数模式 或 构造方法模式)"></a>构造器调用模式(构造函数模式 或 构造方法模式)</h2></blockquote>
<ul>
<li>constructor </li>
<li>特征: 在函数前面用 new 来引导</li>
<li>this 的含义: 刚刚被创建出来的实例对象</li>
<li>注意返回值</li>
<li>调用构造函数时，无参可省略括号</li>
<li>执行步骤</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</div><div class="line"><span class="comment">// new 是运算符，用来申请创建对象，创建出来的对象传递给构造函数的 this</span></div><div class="line"><span class="comment">//利用构造函数对其初始化</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">"Tom"</span>;</div><div class="line">    <span class="keyword">this</span>.age = <span class="string">"19"</span>;</div><div class="line">    <span class="keyword">this</span>.gender = <span class="string">"男"</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 返回值</span></div><div class="line"><span class="comment">// 如果不写return，那么构造函数 默认返回 this</span></div><div class="line"><span class="comment">// 若在构造函数中写return ,并紧跟基本类型(如 return num,ruturn 123).则忽略返回类型</span></div><div class="line"><span class="comment">// 若在构造函数中写return,并紧跟 引用类型 ，那么构造函数返回 该引用类型数据，忽略 this</span></div></pre></td></tr></table></figure>
<blockquote>
<p>构造函数小结</p>
</blockquote>
<p>(1) 构造函数无参数，可以省略括号</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person;</div></pre></td></tr></table></figure>
<p>(2) 创建对象并直接调用 其方法</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">( <span class="keyword">new</span> Person () ).sayHello();</div><div class="line"><span class="comment">//可以省略调整结合性的括号</span></div><div class="line"><span class="keyword">new</span> Person ().sayHello();</div><div class="line"><span class="comment">//若省略构造函数的括号，就必须加结合性的括号</span></div><div class="line">( <span class="keyword">new</span> Person ).sayHello ();</div></pre></td></tr></table></figure>
<blockquote>
<h2 id="上下文调用模式"><a href="#上下文调用模式" class="headerlink" title="上下文调用模式"></a>上下文调用模式</h2></blockquote>
<ul>
<li>特征: 一定是由一个对象引导调用</li>
<li>this 的含义: 引导调用的这个对象</li>
</ul>
<p>-&gt; 上下文调用模式</p>
<pre><code>-&gt; 术语 上下文: 就是 this.

-&gt; 上下文调用模式有标准的调用语法:
  函数名.call( ... )
  函数名.apply( ... )

-&gt; 上下文调用模式这两个形式功能一模一样. 只是参数的形式不同.
-&gt; 上下文调用之所以称为上下文调用, 是因为我们允许利用参数来改变 this 的含义.
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">例如:</div><div class="line">    <span class="keyword">var</span> o1 = &#123; <span class="attr">name</span>: <span class="string">'jim'</span> &#125;;</div><div class="line">    <span class="keyword">var</span> o2 = &#123; <span class="attr">name</span>: <span class="string">'tom'</span> &#125;;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log( <span class="keyword">this</span> ); &#125;</div><div class="line">    func() <span class="comment">// 函数模式 =&gt; window</span></div><div class="line">    o1.func = func;</div><div class="line">    o1.func(); <span class="comment">// 方法模式 =&gt; o1</span></div><div class="line"></div><div class="line">    func.call( o1 ); <span class="comment">// this 就是 o1</span></div><div class="line">    func.call( o2 ); <span class="comment">// this 就是 o2</span></div><div class="line">    func.call( <span class="literal">null</span> ); <span class="comment">// this 就是 window</span></div></pre></td></tr></table></figure>
<pre><code>  说明:
    在利用上下文调用的时候, call 或 apply 的第 0 个参数表示就是 函数中 this 的指向
    如果传入 null 或 undefined 或不传, this 就是 window
    如果传入的是 对象, this 就是传入对象
    如果传入的是 基本类型( 数字, 字符串, boolean )就会将基本类型转换成对应包装类型, 赋值给 this
-&gt; 关于参数
  call 在调用的时候, 函数的参数散列的在 call 中提供.
  apply 在调用的时候, 函数的参数以数组的形式提供.
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">例如: ( 填空题 )</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"> num1,num2 </span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( num1 + num2 );</div><div class="line">    &#125;</div><div class="line">    如果用 call 来调用, 下面的代码 与 func( <span class="number">1</span>, <span class="number">2</span> ) 调用等价</div><div class="line">    func.call( <span class="literal">null</span>, <span class="number">1</span>, <span class="number">2</span> )</div><div class="line">    如果用 apply 来调用, 下面的代码与 func( <span class="number">3</span>, <span class="number">4</span> ) 调用等价</div><div class="line">    func.apply( <span class="literal">null</span>, [ <span class="number">3</span>, <span class="number">4</span> ] )</div><div class="line">验证:</div><div class="line">    看下面这个代码:</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"> arr, callback </span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++ ) &#123;</div><div class="line">        callback( arr[ i ], i );</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    这个 func 用 call 和 apply 分别怎么调用</div><div class="line">    如果以函数的形式调用</div><div class="line">    func( <span class="string">'a,b,c'</span>.split( <span class="string">','</span> ), <span class="function"><span class="keyword">function</span> (<span class="params"> v, i </span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log( i + <span class="string">', '</span> + v );</div><div class="line">    &#125; )</div><div class="line">注意: 有了这个写法, 表示以前凡是使用 函数 与 方法的地方都可以修改成 上下文调用模式</div><div class="line">例如:</div><div class="line">    <span class="keyword">var</span> html = template( <span class="string">'tpl'</span>, &#123;&#125; );</div><div class="line">    =&gt; <span class="keyword">var</span> html = template.call( <span class="literal">null</span>, <span class="string">'tpl'</span>, &#123;&#125; );</div><div class="line">        <span class="keyword">var</span> html = template.apply( <span class="literal">null</span>, [ <span class="string">'tpl'</span>, &#123;&#125; ] );</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> JavaScript学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> apply </tag>
            
            <tag> call </tag>
            
            <tag> 函数调用模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AJAX和模板引擎]]></title>
      <url>/2015/08/20/AJAX%E5%92%8C%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</url>
      <content type="html"><![CDATA[<h1 id="理解同步、异步，掌握ajax概念以及如何发起ajax请求，了解模板引擎及其简单实现原理"><a href="#理解同步、异步，掌握ajax概念以及如何发起ajax请求，了解模板引擎及其简单实现原理" class="headerlink" title="理解同步、异步，掌握ajax概念以及如何发起ajax请求，了解模板引擎及其简单实现原理"></a><font color="deeppink" face="楷体">理解同步、异步，掌握ajax概念以及如何发起ajax请求，了解模板引擎及其简单实现原理</font></h1><h2 id="AJAX定义"><a href="#AJAX定义" class="headerlink" title="AJAX定义"></a>AJAX定义</h2><ul>
<li>AJAX 不是 JavaScript 的规范，它是”<font color="red">A</font>synchronous <font color="red">J</font>avaScript <font color="red">a</font>nd <font color="red">X</font>ML”的缩写,意思是用JavaScript执行 <font color="#XAAAAF">异步</font> 网络请求.</li>
<li>AJAX 不是一门新的语言，而是对现有技术的综合利。</li>
<li>简单说, AJAX 就是<font color="liaqua"> 浏览器 和 服务器 之间进行 异步交互 无需刷新页面</font> 的技术。</li>
</ul>
<p><code>说到这，让我们来了解一下 异步 的相关知识：</code><br><a id="more"></a></p>
<h2 id="异步和同步"><a href="#异步和同步" class="headerlink" title="异步和同步"></a>异步和同步</h2><h3 id="异步-的定义"><a href="#异步-的定义" class="headerlink" title="异步 的定义"></a>异步 的定义</h3><pre><code>异步 指的是某段程序执行时不会阻塞其他程序的执行，其表现形式为程序的执行顺序，不依赖程序本身的 书写顺序，相反为同步。
独立是异步的区别 ，省时是异步的理由。
</code></pre><h3 id="生活中的例子"><a href="#生活中的例子" class="headerlink" title="生活中的例子"></a>生活中的例子</h3><pre><code>打电话是同步，发消息是异步。
</code></pre><h3 id="异步的优势"><a href="#异步的优势" class="headerlink" title="异步的优势"></a>异步的优势</h3><pre><code>异步 的优势在于不阻塞程序的执行，从而提升整体执行效率。
</code></pre><p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/images/yibuyoushi.png?raw=true" alt="异步优势" title="异步优势"></p>
<h2 id="那么如何在-浏览器-上使用-AJAX-呢"><a href="#那么如何在-浏览器-上使用-AJAX-呢" class="headerlink" title="那么如何在 浏览器 上使用 AJAX 呢"></a>那么如何在 浏览器 上使用 AJAX 呢</h2><h3 id="首先了解-AJAX-的原理"><a href="#首先了解-AJAX-的原理" class="headerlink" title="首先了解 AJAX 的原理:"></a>首先了解 AJAX 的原理:</h3><p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/images/ajaxyuanli.png?raw=true" alt="AJAX原理" title="AJAX原理"></p>
<blockquote>
<p>在现代浏览器上书写AJAX主要依靠<strong>XMLHttpRequest</strong>对象。</p>
</blockquote>
<h3 id="认识-XMLHttpRequest-对象"><a href="#认识-XMLHttpRequest-对象" class="headerlink" title="认识 XMLHttpRequest 对象"></a>认识 XMLHttpRequest 对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> 什么是XMLHttpRequest对象？  </div><div class="line">XMLHttpRequest是浏览器的内置对象，用于在后台和服务器通信（交换数据），XMLHttpRequest 对象提供了在网页加载后与服务器进行通信的方法。由此我们可以实现对网页的部分更新，而不是刷新整个页面。</div><div class="line">XMLHttpRequest 对象提供了对 HTTP 协议的完全的访问，包括做出 POST 和 HEAD 请求以及普通的 GET 请求的能力。XMLHttpRequest 可以同步或异步地返回 Web 服务器的响应，并且能够以文本或者一个 DOM 文档的形式返回内容。</div><div class="line"></div><div class="line"><span class="number">2.</span>XMLHttpRequest的主要作用：</div><div class="line">- 在不重新加载页面的情况下更新网页</div><div class="line">- 在页面已加载后从服务器请求数据</div><div class="line">- 在页面已加载后从服务器接收数据</div><div class="line">- 在后台向服务器发送数据</div><div class="line"></div><div class="line"><span class="number">3.</span>注意：</div><div class="line">尽管名为 XMLHttpRequest，它并不限于和 XML 文档一起使用：它可以接收任何形式的文本文档。</div></pre></td></tr></table></figure>
<h3 id="让我们通过一个具体案例更清晰的了解它"><a href="#让我们通过一个具体案例更清晰的了解它" class="headerlink" title="让我们通过一个具体案例更清晰的了解它"></a>让我们通过一个具体案例更清晰的了解它</h3><p><code>点击按钮，获取后台数据，显示到浏览器上。(不刷新页面)</code></p>
<p><code>HTML代码</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    &lt;input type="button" value="获取数据"&gt;</div><div class="line">    &lt;table&gt;</div><div class="line">        &lt;thead&gt;</div><div class="line">            &lt;tr&gt;</div><div class="line">                &lt;th&gt;姓名&lt;/th&gt;&lt;th&gt;头像&lt;/th&gt;&lt;th&gt;性别&lt;/th&gt;&lt;th&gt;年龄&lt;/th&gt;&lt;th&gt;爱好&lt;/th&gt;</div><div class="line">            &lt;/tr&gt;</div><div class="line">        &lt;/thead&gt;</div><div class="line">        &lt;tbody&gt;</div><div class="line">            //接收数据，在这里输出</div><div class="line">        &lt;/tbody&gt;</div><div class="line">    &lt;/table&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<p><code>后台 php 代码</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// 服务器告诉浏览器用什么样的方式解析读取到的内容</span></div><div class="line">header(<span class="string">"Content-Type:application/json;charset=UTF-8"</span>);</div><div class="line"></div><div class="line">$content = file_get_contents(<span class="string">'./jsoncase.json'</span>);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $content;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p><code>JSON 数据</code></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">&#123;<span class="attr">"name"</span>:<span class="string">"悠悠"</span>,</div><div class="line"><span class="attr">"photo"</span>:<span class="string">"./images/gg.jpg"</span>,</div><div class="line"><span class="attr">"sex"</span>:<span class="string">"男"</span>,</div><div class="line"><span class="attr">"age"</span>:<span class="number">18</span>,</div><div class="line"><span class="attr">"hobby"</span>:<span class="string">"两只老虎"</span></div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line"><span class="attr">"name"</span>:<span class="string">"小杨"</span>,</div><div class="line"><span class="attr">"photo"</span>:<span class="string">"./images/ss.jpg"</span>,</div><div class="line"><span class="attr">"sex"</span>:<span class="string">"男"</span>,</div><div class="line"><span class="attr">"age"</span>:<span class="number">43</span>,</div><div class="line"><span class="attr">"hobby"</span>:<span class="string">"污妖王"</span></div><div class="line">&#125;</div><div class="line">...</div><div class="line">]</div></pre></td></tr></table></figure>
<blockquote>
<p>创建XMLHttpRequest对象</p>
</blockquote>
<p><code>通过一行简单的JavaScript代码，我们就可以创建XMLHttpRequest对象。
在所有的现在浏览器（包括IE7）:</code></p>
<p><code>在IE5和IE6中：</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//如果你想把标准写法和IE写法兼容在一起，可以这么写：</span></div><div class="line"><span class="keyword">var</span> request;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">    request = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    request = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="具体代码实现"><a href="#具体代码实现" class="headerlink" title="具体代码实现"></a><font color="red"><strong>具体代码实现</strong></font></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.获取按钮</span></div><div class="line"><span class="keyword">var</span> oBtn = <span class="built_in">document</span>.querySelector(<span class="string">"input"</span>);</div><div class="line"><span class="comment">//2.添加事件</span></div><div class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 3.实例化对象</span></div><div class="line">    <span class="comment">//var xhr= new XMLHttpRequest();（一般这样写就OK）</span></div><div class="line">    <span class="comment">//兼容</span></div><div class="line">    <span class="keyword">var</span> xhr;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 4.设置请求行</span></div><div class="line">    xhr.open(<span class="string">'post'</span>,<span class="string">'./jsonCase.php'</span>);<span class="comment">//xhr.open(请求方式，请求地址，是否异步);默认为asny:true;即异步</span></div><div class="line">    <span class="comment">// 5.设置请求头</span></div><div class="line">    xhr.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);</div><div class="line">    <span class="comment">// 6.设置请求正文（有格式key=value&amp;key=value,如果是get请求，那么请求正文在url后面，请求正文的send方法为null）</span></div><div class="line">    xhr.send(<span class="literal">null</span>);</div><div class="line">    <span class="comment">// 7.监听并处理响应</span></div><div class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>)&#123;</div><div class="line">            <span class="comment">// console.log(xhr.responseText);</span></div><div class="line">            <span class="comment">// 如何获取json中的数据</span></div><div class="line">            <span class="keyword">var</span> result =<span class="built_in">JSON</span>.parse(xhr.responseText);</div><div class="line">            <span class="comment">// console.log(result);</span></div><div class="line">            <span class="keyword">var</span> html= <span class="string">""</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;result.length;i++)&#123;</div><div class="line">            html+=</div><div class="line">                <span class="string">"&lt;tr&gt;"</span>+</div><div class="line">                    <span class="string">"&lt;td&gt;"</span>+result[i].name+<span class="string">"&lt;/td&gt;"</span>+</div><div class="line">                        <span class="string">"&lt;td&gt;"</span>+<span class="string">"&lt;img src="</span>+result[i].photo+<span class="string">"&gt;"</span>+<span class="string">"&lt;/td&gt;"</span>+</div><div class="line">                        <span class="string">"&lt;td&gt;"</span>+result[i].age+<span class="string">"&lt;/td&gt;"</span>+</div><div class="line">                        <span class="string">"&lt;td&gt;"</span>+result[i].height+<span class="string">"&lt;/td&gt;"</span>+</div><div class="line">                        <span class="string">"&lt;td&gt;"</span>+result[i].hobby+<span class="string">"&lt;/td&gt;"</span>+</div><div class="line">                <span class="string">"&lt;/tr&gt;"</span>;<span class="comment">//如果字符串负责，拼接字符串会很繁琐</span></div><div class="line">            &#125;</div><div class="line">        <span class="comment">// console.log(html);</span></div><div class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'table'</span>).innerHTML= html;</div><div class="line">        &#125; </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote>
<p>发送GET请求时</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="comment">//发送GET请求</span></div><div class="line">     <span class="comment">//1.调用xhrt对象的open()方法建立一个连接</span></div><div class="line">     <span class="comment">//①method参数：请求方式</span></div><div class="line">     <span class="comment">//②url参数：请求的目标地址</span></div><div class="line">     <span class="comment">//发送请求参数：附着在URL地址后面</span></div><div class="line">     xhr.open(<span class="string">"get"</span>, <span class="string">"?userName=Tom2015"</span>);</div><div class="line">     <span class="comment">//2.调用xhrt对象的send()方法发送请求数据</span></div><div class="line">     xhr.send();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>发送POST请求</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="comment">//发送POST请求</span></div><div class="line"><span class="comment">//发送请求参数：将请求参数键值对以参数形式传递给send()方法</span></div><div class="line">xhr.open(<span class="string">"post"</span>, <span class="string">"./jsonCase.php"</span>);</div><div class="line"><span class="comment">//设置请求消息头为如下的值：</span></div><div class="line"><span class="comment">//Content-Type:application/x-www-form-urlencoded</span></div><div class="line">xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">xhr.send(<span class="string">"userName=Jerry2015&amp;userPwd=123456"</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>这一点详情见我以前总结的相关于请求报文和响应报文的文章</code></p>
<h2 id="如何更简单的发起-ajax-请求："><a href="#如何更简单的发起-ajax-请求：" class="headerlink" title="如何更简单的发起 ajax 请求："></a>如何更简单的发起 ajax 请求：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">jQuery Ajax操作函数</div><div class="line">&gt; $.ajax()</div><div class="line"></div><div class="line">配置项</div><div class="line"></div><div class="line">type 默认值: <span class="string">"GET"</span>)。请求方式 (<span class="string">"POST"</span> 或 <span class="string">"GET"</span>)， 默认为 <span class="string">"GET"</span>。</div><div class="line"></div><div class="line">url 默认值: 当前页地址。发送请求的地址。</div><div class="line"></div><div class="line">data 发送到服务器的数据。将自动转换为请求字符串格式。</div><div class="line"></div><div class="line">processData 默认情况下，通过data选项传递进来的数据，如果是一个对象都会处理转化成一个查询字符串</div><div class="line"></div><div class="line">dataType 预期服务器返回的数据类型。如果不指定，jQuery 将自动根据 HTTP 包 MIME 信息来智能判断</div><div class="line">如果为json:它首先尝试使用 <span class="built_in">JSON</span>.parse()。如果浏览器不支持，则使用一个函数来构建。</div><div class="line"></div><div class="line">如果为jsonp 类型，那么当从服务器接收到数据时，实际上是用了 &lt;script&gt; 标签而不是 XMLHttpRequest 对象。</div><div class="line"></div><div class="line">如果为text 和 xml 类型返回的数据不会经过处理。数据仅仅简单的将 XMLHttpRequest 的 responseText 或 responseHTML 属性传递给 success 回调函数。</div><div class="line"></div><div class="line">timeout设置请求超时时间（毫秒）。</div><div class="line"></div><div class="line">&gt; $.get(url,data,success(data, textStatus),dataType);</div><div class="line"></div><div class="line">&gt; $.post(url,data,success(data, textStatus),dataType);</div></pre></td></tr></table></figure>
<p><code>上面我们发现，拼接字符串会很繁琐，那么如何让拼接字符串变得更简单</code></p>
<h1 id="使用模板引擎"><a href="#使用模板引擎" class="headerlink" title="使用模板引擎"></a>使用模板引擎</h1><h2 id="1-模板引擎介绍"><a href="#1-模板引擎介绍" class="headerlink" title="1.模板引擎介绍"></a>1.模板引擎介绍</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">JavaScript 模板引擎是将 HTML 结构从包含它们的内容中分离的方法。使用模板引擎的原因是当页面比较复杂的时候。</div><div class="line">拼接字符串麻烦且容易出错。JavaScript模板引擎可以帮我们解决这个问题。</div><div class="line">拼接字符串是麻烦但是如果对于简单的布局 就别用模板引擎</div><div class="line">如果页面比较复杂 或者需要的数据的页面比较麻烦 那么才用模板引擎</div></pre></td></tr></table></figure>
<h2 id="2-常见的模板引擎"><a href="#2-常见的模板引擎" class="headerlink" title="2.常见的模板引擎"></a>2.常见的模板引擎</h2><p>1.<a href="https://github.com/aui/art-template" title="art-template" target="_blank" rel="external">art-template(腾讯)</a></p>
<p>2.<a href="http://baidufe.github.io/BaiduTemplate/&quot;BaiduTemplate&quot;" target="_blank" rel="external">BaiduTemplate(百度)</a> </p>
<p>3.<a href="https://github.com/shepherdwind/velocity.js&quot;Velocity&quot;" target="_blank" rel="external">Velocity(阿里)</a></p>
<p>4.<a href="http://handlebarsjs.com/" title="Handlebars" target="_blank" rel="external">Handlebars</a></p>
<p><code>每个模板都有自己的语法，详情见各自的readme.md,下面只阐述一下art-template的原生语法，方便初学者入门</code></p>
<h2 id="3-art-template-语法"><a href="#3-art-template-语法" class="headerlink" title="3.art-template 语法"></a>3.art-template 语法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="number">1</span>&gt;.引入模板引擎的包</div><div class="line"></div><div class="line">&lt;<span class="number">2</span>&gt;.创建模板</div><div class="line">    模板中的变量就是对象的属性</div><div class="line">    &lt;%title%&gt; 不输出</div><div class="line">    &lt;%=title%&gt; 输出到html上</div><div class="line">&lt;<span class="number">3</span>&gt;.获取数据</div><div class="line"></div><div class="line">&lt;<span class="number">4</span>&gt;.把数据和模板绑定起来</div><div class="line"><span class="keyword">template</span>(id,对象) 返回绑定好的html字符串</div></pre></td></tr></table></figure>
<h2 id="4-深入探究模板的原理"><a href="#4-深入探究模板的原理" class="headerlink" title="4.深入探究模板的原理"></a>4.深入探究模板的原理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">==&gt;<span class="number">1</span> <span class="comment">//利用正则表达式的方法，找到字符串中特定自负，替换为数据对应的值</span></div><div class="line">        &lt;script&gt;</div><div class="line">		<span class="comment">// 有一个字符串</span></div><div class="line">		<span class="keyword">var</span> html = <span class="string">'我叫&lt;% name %&gt;，我今年&lt;% age %&gt;岁了，我在&lt;% school %&gt;学习'</span>;</div><div class="line">		<span class="comment">// 数据</span></div><div class="line">		<span class="keyword">var</span> data = &#123;</div><div class="line">			<span class="attr">name</span>: <span class="string">'小明'</span>,</div><div class="line">			<span class="attr">age</span>: <span class="number">18</span>,</div><div class="line">			<span class="attr">school</span>: <span class="string">'某大'</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="keyword">var</span> reg = <span class="regexp">/&lt;%\s*([^%&gt;]\S+)\s*%&gt;/</span>;</div><div class="line">		<span class="comment">// /&lt;%\s*([^%&gt;]\S+)\s*%&gt;/这是整个表达式 &lt;% name %&gt; &lt;% age %&gt; &lt;% school %&gt;</span></div><div class="line">		<span class="comment">// ([^%&gt;]\S+) 这是一个子表达式 name age  school</span></div><div class="line"></div><div class="line">		<span class="comment">// exec()  match()  test() 方法属于正则表达式的三个方法</span></div><div class="line"></div><div class="line">		<span class="comment">// exec()匹配一个正则表达式  如果该表达式还有子表达式 那么会把整个表达式的匹配的结果和子表达式匹配的结果 当作数组返回</span></div><div class="line"></div><div class="line"></div><div class="line">		<span class="keyword">var</span> match = reg.exec(html);</div><div class="line">		<span class="comment">// console.log(match);</span></div><div class="line">		html = html.replace(match[<span class="number">0</span>], data[match[<span class="number">1</span>]]);</div><div class="line">		<span class="built_in">console</span>.log(html);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">		match = reg.exec(html);</div><div class="line">		<span class="comment">// console.log(match);</span></div><div class="line">		html = html.replace(match[<span class="number">0</span>], data[match[<span class="number">1</span>]]);</div><div class="line">		<span class="built_in">console</span>.log(html);</div><div class="line"></div><div class="line"></div><div class="line">		match = reg.exec(html);</div><div class="line">		<span class="comment">// console.log(match);</span></div><div class="line">		html = html.replace(match[<span class="number">0</span>], data[match[<span class="number">1</span>]]);</div><div class="line">		<span class="built_in">console</span>.log(html);</div><div class="line"></div><div class="line">		match = reg.exec(html);</div><div class="line">		<span class="built_in">console</span>.log(match); <span class="comment">//如果没有匹配的结果之后返回null</span></div><div class="line">	&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">==&gt;<span class="number">2</span> <span class="comment">//简化代码</span></div><div class="line">        &lt;script&gt;</div><div class="line">		<span class="comment">// 有一个字符串</span></div><div class="line">		<span class="keyword">var</span> html = <span class="string">'我叫&lt;% name %&gt;，我今年&lt;% age %&gt;岁了，性别&lt;%sex%&gt;，我在&lt;% school %&gt;学习'</span>;</div><div class="line"></div><div class="line">		<span class="comment">// 数据</span></div><div class="line">		<span class="keyword">var</span> data = &#123;</div><div class="line">			<span class="attr">name</span>: <span class="string">'小明'</span>,</div><div class="line">			<span class="attr">age</span>: <span class="number">18</span>,</div><div class="line">			<span class="attr">school</span>: <span class="string">'某大'</span>,</div><div class="line">			<span class="attr">sex</span>: <span class="string">'男'</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">var</span> reg = <span class="regexp">/&lt;%\s*([^%&gt;]\S+)\s*%&gt;/</span>;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="keyword">var</span> match = <span class="literal">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">while</span> (match = reg.exec(html)) &#123;</div><div class="line">			html = html.replace(match[<span class="number">0</span>], data[match[<span class="number">1</span>]]);</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">console</span>.log(html);</div><div class="line">	&lt;/script&gt;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">==&gt;<span class="number">3</span> <span class="comment">//封装函数</span></div><div class="line">        &lt;p&gt;&lt;/p&gt;</div><div class="line">	&lt;script type=<span class="string">"text/template"</span> id=<span class="string">"tmpl"</span>&gt;</div><div class="line">		我叫&lt;span&gt;&lt;% name %&gt;&lt;/span&gt;，我今年&lt;span&gt;&lt;% age %&gt;&lt;/span&gt;岁了，我在</div><div class="line">		&lt;% school %&gt;学习;</div><div class="line">	&lt;/script&gt;</div><div class="line">	&lt;script&gt;</div><div class="line">		<span class="comment">// 数据</span></div><div class="line">		<span class="keyword">var</span> cc = &#123;</div><div class="line">			<span class="attr">name</span>: <span class="string">'小明'</span>,</div><div class="line">			<span class="attr">age</span>: <span class="number">18</span>,</div><div class="line">			<span class="attr">school</span>: <span class="string">'某大'</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 封装template函数</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">template</span>(<span class="params">id, data</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> html = <span class="built_in">document</span>.getElementById(id).innerHTML;</div><div class="line">			<span class="keyword">var</span> reg = <span class="regexp">/&lt;%\s*([^%&gt;]\S+)\s*%&gt;/</span>;</div><div class="line">			<span class="keyword">var</span> match = <span class="literal">null</span>;</div><div class="line">			<span class="keyword">while</span> (match = reg.exec(html)) &#123;</div><div class="line">				html = html.replace(match[<span class="number">0</span>], data[match[<span class="number">1</span>]]);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> html;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">var</span> html = template(<span class="string">'tmpl'</span>, cc);</div><div class="line">		<span class="comment">// console.log(html);</span></div><div class="line">		<span class="built_in">document</span>.querySelector(<span class="string">"p"</span>).innerHTML = html;</div><div class="line">	&lt;/script&gt;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> JavaScript学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AJAX </tag>
            
            <tag> 同步 </tag>
            
            <tag> 异步 </tag>
            
            <tag> 模板引擎 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何将本地仓库和github仓库关联起来]]></title>
      <url>/2015/04/04/%E5%A6%82%E4%BD%95%E5%B0%86%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%92%8Cgithub%E4%BB%93%E5%BA%93%E5%85%B3%E8%81%94%E8%B5%B7%E6%9D%A5/</url>
      <content type="html"><![CDATA[<p>当你在 GitHub 创建一个代码仓库后，需要將其与你的本地仓库关联起来。  </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//把本地项目变成版本仓库</span></div><div class="line">git init  </div><div class="line"><span class="comment">//把目录当前目录下所有的文件信息添加到索引库的暂存区里面去</span></div><div class="line">git add -A </div><div class="line"><span class="comment">//通过命令git commit 把刚刚提交到暂存区里的文件提交到仓库。</span></div><div class="line"><span class="comment">//git commit -m "提交所有文件"，-m 后面的文字是注释，方便查看历史记录时知道每一次提交提交的是什么</span></div><div class="line">git commit -m <span class="string">"First commit"</span> </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//开始把本地仓库的内容推送到GitHub仓库。</span></div><div class="line">git remote add origin https:<span class="comment">//github.com/.../.git(自己的仓库地址)</span></div><div class="line"></div><div class="line"><span class="comment">//然后通过命令git push把本地仓库的内容推送到github仓库去。</span></div><div class="line"><span class="comment">//第一次推送在git push后面加上参数-u，使用-u选项指定一个默认主机。</span></div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<p>以上操作基本上就是最简单的从把本地项目目录变成Git仓库，然后在把内容推送到自己的github上面</p>
]]></content>
      
        <categories>
            
            <category> GitHub学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> github仓库 </tag>
            
            <tag> 本地仓库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[快速理解原型链]]></title>
      <url>/2015/03/14/%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3JS%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      <content type="html"><![CDATA[<h1 id="JS中原型链的理解"><a href="#JS中原型链的理解" class="headerlink" title="JS中原型链的理解"></a><font face="楷体" color="Salmon">JS中原型链的理解</font></h1><h2 id="一、了解构造函数、原型和实例之间的关系-实例原型三角形"><a href="#一、了解构造函数、原型和实例之间的关系-实例原型三角形" class="headerlink" title="一、了解构造函数、原型和实例之间的关系( 实例原型三角形 )"></a>一、<font color="red">了解构造函数、原型和实例之间的关系( 实例原型三角形 )</font></h2><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">在 js 中凡是函数背后都有一个对象存在.</div><div class="line">这个对象使用 函数名.prototype 来访问. 默认情况下这个对象含有一个属性 constructor用于指向回该函数. </div><div class="line">也就是说, 在默认情况下, 如果一个对象含有 constructor 属性, 同时,它执行某一个函数, 那么就表示这个对象是这个函数背后的 prototype.</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>在构造函数上，都有一个 原型属性 <code>prototype</code>,该属性也是一个对象( Object 的实例 )；</li>
<li>原型对象上有一个 <code>constructor</code> 属性，该属性指向 原型对象所属的构造函数 ；</li>
<li>而实例对象上也有一个 <code>__proto__</code> 属性,该属性也指向 构造函数的原型属性 ( 即指向自己的原型对象 )，它是一个非标准属性，不可以用于编程，它是浏览器使用，便于快速访问查看实例的原型属性。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">// __proto__</span></div><div class="line">在函数里有一个属性 prototype</div><div class="line">    <span class="comment">//prototype 与 __proto__的关系</span></div><div class="line">☞ __proto__ 是站在对象角度来说的</div><div class="line">☞ prototype 是站在构造函数来说的.</div><div class="line">  函数的 prototype 这个对象, 里面的所有成员( 属性, 方法 )</div><div class="line">  都会默认的连接到这个函数作为构造函数时创建的对象上.</div></pre></td></tr></table></figure>
<blockquote>
<p>看图理解函数、原型和实例之间的关系( 绘制原型实例三角形 )</p>
</blockquote>
<p><img src="https://github.com/HudadaHexiaolili/Blogphotos/blob/master/images/yuanxinglian.png?raw=true" alt="插入图片" title="原型实例三角形"></p>
<font color="goldenrod">注意：</font>

<ol>
<li>凡是构造函数就有原型属性, 凡是实例对象就有原型对象.</li>
<li>prototype 和 <strong>proto</strong>都指向同一个对象。              这个对象在构造函数角度来看, 是利用 prototype 属性获得到的, 因此将其称为 <font color="LightCoral">构造函数的 原型属性</font>, 简称原型.如果站在实例对象和这个神秘对象的角度来看, 神秘对象被称为 <font color="LightCoral">实例对象的 原型对象</font>, 简称为原型.</li>
</ol>
<h2 id="二、什么是原型链"><a href="#二、什么是原型链" class="headerlink" title="二、什么是原型链"></a>二、<font color="red">什么是原型链</font></h2><p>说白了，其实就是有限的实例对象和原型之间组成有限链，用来实现 属性共享 和 继承。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//原型链示例</span></div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line">    arr -&gt; <span class="built_in">Array</span>.prototype -&gt;<span class="built_in">Object</span>.prototype -&gt;<span class="literal">null</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();<span class="comment">// var o = &#123;&#125;;</span></div><div class="line">    o -&gt; <span class="built_in">Object</span>.prototype -&gt; <span class="literal">null</span>;</div></pre></td></tr></table></figure>
<h2 id="三、接下来探究-继承-问题"><a href="#三、接下来探究-继承-问题" class="headerlink" title="三、接下来探究 继承 问题"></a>三、<font color="red">接下来探究 <font color="deeppink">继承</font> 问题</font></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">概念：所谓的继承就是拿来主义，自己没有，别人有，拿来称为自己的，就表示你继承了这个东西。</div></pre></td></tr></table></figure>
<p><code>实现继承的方法：</code></p>
<h3 id="1-原型继承"><a href="#1-原型继承" class="headerlink" title="1. 原型继承"></a><font color="DarkMagenta">1. 原型继承</font></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">   <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tiger</span>(<span class="params">color</span>)</span>&#123;</div><div class="line">   <span class="keyword">this</span>.color = color;</div><div class="line">&#125;</div><div class="line"><span class="comment">//   var tiger = new Tiger('yellow');</span></div><div class="line"><span class="comment">//   console.log(tiger.color);</span></div><div class="line"><span class="comment">//   console.log(tiger.name);  //undefined</span></div><div class="line"><span class="comment">//   Tiger.prototype = new Animal('老虎'); </span></div><div class="line"><span class="comment">//   第一种方式</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.prototype.name = <span class="string">'大老虎'</span>;   <span class="comment">//第二种方式</span></div><div class="line"><span class="keyword">var</span> tiger = <span class="keyword">new</span> Tiger(<span class="string">'yellow'</span>);</div><div class="line"><span class="built_in">console</span>.log(tiger.color);</div><div class="line"><span class="built_in">console</span>.log(tiger.name);</div></pre></td></tr></table></figure>
<h3 id="2-直接替换原型对象："><a href="#2-直接替换原型对象：" class="headerlink" title="2. 直接替换原型对象："></a><font color="DarkMagenta">2. 直接替换原型对象：</font></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Person.prototype = &#123;</div><div class="line">    <span class="attr">constructor</span>: Person,</div><div class="line">    <span class="attr">sayHello</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">    <span class="attr">run</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">    <span class="attr">eat</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">    <span class="attr">walk</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">注意: 这个方法实际上更换的原有的原型对象. 应该注意.</div><div class="line"></div><div class="line">function Person() &#123;&#125;</div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();  </div><div class="line"><span class="comment">// 继承关系: p1 -&gt; 原始的原型( Person.prototype ) -&gt; Object.prototype -&gt; null</span></div><div class="line">Person.prototype = &#123;</div><div class="line">    <span class="attr">constructor</span>: Person,</div><div class="line">    <span class="attr">sayHello</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">    <span class="attr">run</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">    <span class="attr">eat</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">    <span class="attr">walk</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(); </div><div class="line"><span class="comment">// 继承关系: p2 -&gt; 新的原型( 含有 sayHello 等方法的原型 ) -&gt; Object.prototype -&gt; null</span></div></pre></td></tr></table></figure>
<font color="goldenrod">注意：</font>

<ul>
<li>它不方便给父级类型传递参数；</li>
<li>父级类型当中的引用类型被所有实例共享</li>
</ul>
<h3 id="3-标准继承：利用-Object-creat-方法-实现继承"><a href="#3-标准继承：利用-Object-creat-方法-实现继承" class="headerlink" title="3. 标准继承：利用  Object.creat()方法 实现继承"></a><font color="DarkMagenta">3. 标准继承：</font>利用  Object.creat()方法 实现继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//兼容</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">Object</span>.create)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.create(obj);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">            Foo.prototype = obj;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Foo();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<font color="goldenrod">注意：</font><br>Object.create() 方法使用指定的原型对象和其属性创建了一个新的对象。它是 ES5 的新特性。<br><br><code>语法：</code><br>    Object.creat( 对象 ) -&gt; 新的对象<br><br><code>意义：</code><br>    返回的新对象，原型继承自 create 方法参数中提供的对象。<br><br><code>用途：</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">  -&gt; <span class="number">1.</span>借用已有方法实现原型式继承</div><div class="line">  </div><div class="line">  场景: 数组不能遍历键值对, 我自己创建有一个构造函数,</div><div class="line">        使得我可以处理键值对,将键值对作为有序键值对来使用. </div><div class="line">  例如: </div><div class="line">      <span class="keyword">var</span> kv = &#123; <span class="attr">name</span>: <span class="string">'jim'</span>, <span class="attr">age</span>: <span class="number">19</span>, <span class="attr">gender</span>: <span class="string">'男'</span> &#125;;</div><div class="line">      例如我创建一个构造函数 SortedList, 可以将其转换成</div><div class="line">      [ &#123; <span class="attr">key</span>: <span class="string">'name'</span>, <span class="attr">value</span>: <span class="string">'jim'</span> &#125;,</div><div class="line">       &#123; <span class="attr">key</span>: <span class="string">'age'</span>, <span class="attr">value</span>: <span class="number">19</span> &#125;, </div><div class="line">       &#123; <span class="attr">key</span>: <span class="string">'gender'</span>, <span class="attr">value</span>: <span class="string">'男'</span> &#125; ]</div><div class="line">      再提供一个 keys 方法与 values 方法, 分别获得所有的键 或 值</div><div class="line"></div><div class="line">      我们可以认为 SortedList 是继承自数组的对象.</div><div class="line">  </div><div class="line">  实现以下:</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SortedList</span> (<span class="params"> kv </span>) </span>&#123;</div><div class="line">      <span class="comment">// this 继承自 数组, 因此 this 应该就是数组, </span></div><div class="line">      <span class="comment">// 因此就应该将 kv 中每一个键值对构造成一个对象以元素的形式存储在 this 中</span></div><div class="line">      <span class="keyword">for</span> ( <span class="keyword">var</span> key <span class="keyword">in</span> kv ) &#123;</div><div class="line">        <span class="keyword">this</span>.push(&#123;</div><div class="line">          <span class="attr">key</span>: key,</div><div class="line">          <span class="attr">value</span>: kv[ key ]</div><div class="line">        &#125;);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// SortedList.prototype = Object.create( Array.prototype );</span></div><div class="line">    <span class="comment">// 简化一下</span></div><div class="line">    SortedList.prototype = [];</div><div class="line"></div><div class="line">-&gt; <span class="number">2.</span>提高缓存性能</div><div class="line">  <span class="keyword">var</span> cache = &#123;&#125;; <span class="comment">// 缓存</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__ajax__</span>(<span class="params"> config </span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> data = config.data;</div><div class="line">    <span class="comment">// data 是一个键值对</span></div><div class="line">    <span class="comment">// 将键值对拼成 请求参数</span></div><div class="line">    <span class="keyword">var</span> tmp = [];</div><div class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> key <span class="keyword">in</span> data ) &#123;</div><div class="line">      tmp.push( key + <span class="string">'='</span> + data[ key ] );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> queryString = <span class="string">'?'</span> + tmp.join( <span class="string">'&amp;'</span> );</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log( queryString );</div><div class="line">  &#125;</div></pre></td></tr></table></figure><br><br><font></font>

<h3 id="4-借用构造函数继承："><a href="#4-借用构造函数继承：" class="headerlink" title="4. 借用构造函数继承："></a><font color="DarkMagenta">4. 借用构造函数继承：</font></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//被借用的构造函数中原型上的成员没有被拿来</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mouse</span>(<span class="params">nickname</span>)</span>&#123;</div><div class="line">    Animal.call(<span class="keyword">this</span>,<span class="string">'老鼠'</span>);</div><div class="line">    <span class="keyword">this</span>.nickname = nickname;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> Mouse(<span class="string">'杰瑞'</span>);</div><div class="line"><span class="built_in">console</span>.log(m.name);</div><div class="line"><span class="built_in">console</span>.log(m.nickname);</div></pre></td></tr></table></figure>
<font color="goldenrod">存在的问题：</font>

<p>可以解决原型继承中的传参问题，但是父类型当中的原型对象上的成员 ( 属性和方法 ) 不能被继承到。</p>
<h3 id="5-混入式继承："><a href="#5-混入式继承：" class="headerlink" title="5. 混入式继承："></a><font color="DarkMagenta">5. 混入式继承：</font></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params"> obj </span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> k <span class="keyword">in</span> obj ) &#123;</div><div class="line">    <span class="keyword">this</span>[ k ] = obj[ k ];</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">jQuery.extend(&#123;</div><div class="line">  <span class="attr">map</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">  <span class="attr">each</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">jQuery.fn.extend(&#123;</div><div class="line">  <span class="attr">map</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">  <span class="attr">each</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="6-组合继承："><a href="#6-组合继承：" class="headerlink" title="6. 组合继承："></a><font color="DarkMagenta">6. 组合继承：</font></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">组合: 多个东西放到一起. </div><div class="line">  组合式继承就是说把多个继承方案混合到一起使用.</div><div class="line">  就以原型式继承与混入式继承为例, 一般书写构造函数的时候都是这么实现的:</div><div class="line">    <span class="number">1</span>&gt; 写一个构造函数</div><div class="line">    <span class="number">2</span>&gt; 准备一个原型</div><div class="line">    <span class="number">3</span>&gt; 准备一个混入方法</div><div class="line">    <span class="number">4</span>&gt; 在原型中混入多个成员</div><div class="line">    <span class="number">5</span>&gt; 使用构造函数创建对象, 对象就有 多个 方法了.</div></pre></td></tr></table></figure>
<h2 id="四、属性搜索原则-和-写入原则"><a href="#四、属性搜索原则-和-写入原则" class="headerlink" title="四、属性搜索原则 和 写入原则"></a>四、<font color="red">属性搜索原则 和 写入原则</font></h2><h3 id="属性搜索原则"><a href="#属性搜索原则" class="headerlink" title="属性搜索原则"></a><font color="hotpink">属性搜索原则</font></h3><ol>
<li>在访问对象的某个成员的时候会先在当前对象中查找是否存在，如果当前对象存在，停止查询；</li>
<li>如果当前对象中没有，就在构造函数的原型对象中查找，如果存在，停止查询；</li>
<li>如果原型对象中没有找到，就到原型对象的原型中查找…</li>
<li>直到找到或者查询到Object的原型对象的原型是 null 为止。</li>
</ol>
<h3 id="写入原则"><a href="#写入原则" class="headerlink" title="写入原则"></a><font color="hotpink">写入原则</font></h3><p>在 <font color="aqua"> 获取 </font>一个对象的属性值或方法的时候，才会沿着原型链向下寻找，<font color="aqua"> 属性赋值 </font>没有这个，如果是给对象设置成员( 属性或方法 )，都是在当前对象上进行设置。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">name</span>:<span class="string">'one'</span>&#125;;</div><div class="line">obj2 = <span class="built_in">Object</span>.create(obj1);</div><div class="line">obj2.name = <span class="string">'two'</span>;</div><div class="line"><span class="built_in">console</span>.log(obj1.name);</div><div class="line"><span class="comment">//one</span></div><div class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">prop</span>:&#123;<span class="attr">name</span>:<span class="string">'one'</span>&#125;&#125;;</div><div class="line">obj2 = <span class="built_in">Object</span>.create(obj1);</div><div class="line">obj2.prop.name = <span class="string">'two'</span>;</div><div class="line"><span class="built_in">console</span>.log(obj1.prop.name);</div><div class="line"><span class="comment">//two</span></div></pre></td></tr></table></figure>
<h2 id="五、拓展"><a href="#五、拓展" class="headerlink" title="五、拓展"></a>五、<font color="red">拓展</font></h2><h3 id="proto属性"><a href="#proto属性" class="headerlink" title="proto属性"></a><strong>proto</strong>属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">最早是 狐火在浏览器中引入, 其目的是利用实例对象观察其原型的结构.</div><div class="line">  早期没有 __proto__ 的时候, 为了观察对象的继承关系, 必须通过 实例.constructor.prototype </div><div class="line">  来获得实例对象的 原型对象. 在分析过程中非常麻烦. 因此在 火狐浏览器中给实例对象引入了 </div><div class="line">  __proto__ 属性, 用于快速的访问该实例的 原型对象. 该属性带有双下划线, 表示内部属性.</div><div class="line">  后来各大浏览器也效仿, 引入该属性, 从而使用 利用实例也可以访问原型对象了( 神秘对象了 ).</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//如果浏览器不支持 __proto__ 我们应该怎么实现该功能呢?</span></div><div class="line">    <span class="built_in">Object</span>.prototype.__myProto__ = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.constructor.prototype;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<h3 id="Object-prototype-相关"><a href="#Object-prototype-相关" class="headerlink" title="Object.prototype 相关"></a>Object.prototype 相关</h3><h4 id="Object-prototype中常用成员"><a href="#Object-prototype中常用成员" class="headerlink" title="Object.prototype中常用成员"></a>Object.prototype中常用成员</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">-&gt; hasOwnProperty</div><div class="line">  语法: </div><div class="line">    对象.hasOwnProperty( <span class="string">'属性的名字'</span> ) -&gt; boolean</div><div class="line">  含义: </div><div class="line">    当前对象是否含有该属性, 意味着该属性不是原型继承而来.</div><div class="line">-&gt; isPrototypeOf</div><div class="line">  语法:</div><div class="line">    对象<span class="number">1.</span>isPrototypeOf( 对象<span class="number">2</span> ) -&gt; boolean</div><div class="line">  含义:</div><div class="line">    对象<span class="number">1</span> 是不是 对象<span class="number">2</span> 的原型对象, 如果是 返回 <span class="literal">true</span>, 否则返回 <span class="literal">false</span></div><div class="line">-&gt; propertyIsEnumerable</div><div class="line">  语法:</div><div class="line">    对象.prototypeIsEnumerable( <span class="string">'属性名'</span> ) -&gt; boolean</div><div class="line">  含义:</div><div class="line">    对象的对应属性 如果是 自己的( 非原型中的 ) 同时可枚举( 可以 forin 出来 ), 就返回 <span class="literal">true</span>, 否则返回 <span class="literal">false</span></div><div class="line">  注意: </div><div class="line">    所谓的 可枚举是说可以被 <span class="keyword">for</span>-<span class="keyword">in</span> 遍历出来</div><div class="line">    在 ES5 以前, 用户自定义的属性方法都是可以枚举的, 不允许设置为不可枚举. </div><div class="line">    在 ES5 以后, 引入了 <span class="built_in">Object</span>.defineProperty 和 <span class="built_in">Object</span>.defineProperties 方法, 用该方法可以定义其不可枚举.</div><div class="line">-&gt; toLocaleString 和 toString</div><div class="line">  to*<span class="built_in">String</span> 作用是将对象转换成字符串, 以供打印输出.</div><div class="line">  由于每一个对象都可以调用 to*<span class="built_in">String</span> 方法, 但是又不清楚如何实现字符串的转换</div><div class="line">  因此 js 的作者就约定 默认的 to*<span class="built_in">String</span> 显示出: [object 构造函数名]</div><div class="line">  如果是定义构造函数则显示 [object <span class="built_in">Object</span>]. 然后由各个对象自己实现具体 to*<span class="built_in">String</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> JavaScript学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 原型链 </tag>
            
            <tag> 继承 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
